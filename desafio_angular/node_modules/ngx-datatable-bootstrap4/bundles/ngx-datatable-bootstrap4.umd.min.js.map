{"version":3,"sources":["ng://ngx-datatable-bootstrap4/components/column/column.directive.ts","ng://ngx-datatable-bootstrap4/components/pagination/pagination.component.ts","ng://ngx-datatable-bootstrap4/components/row/row.component.ts","ng://ngx-datatable-bootstrap4/components/types.ts","ng://ngx-datatable-bootstrap4/components/table/table.component.ts","ng://ngx-datatable-bootstrap4/utils/drag.ts","ng://ngx-datatable-bootstrap4/components/title/title.component.ts","ng://ngx-datatable-bootstrap4/components/title/title.directive.ts","ng://ngx-datatable-bootstrap4/utils/hide.directive.ts","ng://ngx-datatable-bootstrap4/utils/min.pipe.ts","ng://ngx-datatable-bootstrap4/utils/px.pipe.ts","ng://ngx-datatable-bootstrap4/tools/data-table-resource.ts","ng://ngx-datatable-bootstrap4/index.ts"],"names":["DataTableColumn","prototype","getCellColor","row","index","this","cellColors","undefined","item","ngOnInit","_initCellClass","styleClass","property","test","replace","styleClassObject","_a","Directive","args","selector","Input","ContentChild","DataTablePagination$$1","dataTable","Object","defineProperty","DataTablePagination","Math","ceil","itemCount","limit","value","Number","floor","page","offset","min","maxPage","event","inputChar","String","fromCharCode","charCode","preventDefault","Component","template","styles","DataTable","decorators","type","Inject","forwardRef","DataTableRow$$1","EventEmitter","DataTableRow","_selected","selected","selectedChange","emit","pagination","displayParams","rowTooltip","Output","defaultTranslations","indexColumn","selectColumn","expandColumn","paginationLimit","paginationRange","_items","items","_onReloadFinished","_sortBy","_triggerReload","_sortAsc","_offset","_limit","_reloading","_displayParams","_selectAllCheckbox","_onSelectAllChanged","count","indexColumnVisible","selectColumnVisible","expandColumnVisible","columns","toArray","forEach","column","visible","Array","from","length","rowColors","sortBy","asc","sortAsc","reload","_getRemoteParameters","rowClick","rowDoubleClick","_resizeInProgress","headerClick","cellClick","rowExpand","multiSelect","selectedRows","indexOf","push","splice","selectedRow","rows","filter","row_","columnElement","_this","drag","move","up","startX","pageX","startY","pageY","x","y","moved","mouseMoveHandler","e","dx","dy","document","addEventListener","mouseUpHandler","removeEventListener","moveEvent","_isResizeInLimit","width","offsetWidth","_initDefaultValues","_initDefaultClickEvents","_updateDisplayParams","autoReload","_scheduledReload","reloadItems","expandableRows","subscribe","tableEvent","_sortColumn","selectOnRowClick","clearTimeout","setTimeout","params","sortable","ascending","sort","resizeLimit","nextElementSibling","DataTableTitle","ContentChildren","ViewChildren","DataTableTitleComponent","_closeSelector","$event","columnSelectorOpen","HostListener","isBlank","obj","HideDirective","_elementRef","_renderer","newCondition","initDisplayStyle","_prevCondition","setElementStyle","nativeElement","_displayStyle","displayStyle","style","display","ElementRef","Renderer","MinPipe","transform","_i","arguments","apply","Pipe","name","PxPipe","DataTableResource","query","result","slice","a","b","localeCompare","reverse","Promise","resolve","reject","DataTableModule","NgModule","imports","CommonModule","FormsModule","declarations","exports"],"mappings":"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","sourcesContent":["import {ContentChild, Directive, Input, OnInit, TemplateRef} from '@angular/core';\nimport {DataTableRow} from '../../';\nimport {CellCallback} from '../types';\n\n@Directive({\n  selector: 'data-table-column'\n})\nexport class DataTableColumn<T> implements OnInit {\n\n  // for [ngClass]\n  styleClassObject = {};\n\n  // init:\n  @Input()\n  header: string;\n  @Input()\n  sortable = false;\n  @Input()\n  resizable = false;\n  @Input()\n  property: string;\n  @Input()\n  styleClass: string;\n  @Input()\n  cellColors: CellCallback<T>;\n  @Input()\n  width: number | string;\n  @Input()\n  visible = true;\n\n  @ContentChild('cellTemplate')\n  cellTemplate: TemplateRef<any>;\n  @ContentChild('headerTemplate')\n  headerTemplate: TemplateRef<any>;\n\n  getCellColor(row: DataTableRow<T>, index: number) {\n    if (this.cellColors !== undefined) {\n      return (<CellCallback<T>>this.cellColors)(row.item, row, this, index);\n    }\n  }\n\n  ngOnInit() {\n    this._initCellClass();\n  }\n\n  private _initCellClass() {\n    if (!this.styleClass && this.property) {\n      if (/^[a-zA-Z0-9_]+$/.test(this.property)) {\n        this.styleClass = 'column-' + this.property;\n      } else {\n        this.styleClass = 'column-' + this.property.replace(/[^a-zA-Z0-9_]/g, '');\n      }\n    }\n\n    if (this.styleClass != null) {\n      this.styleClassObject = {\n        [this.styleClass]: true\n      };\n    }\n  }\n}\n","import {Component, forwardRef, Inject} from '@angular/core';\nimport {DataTable} from '../../';\n\n\n@Component({\n  selector: 'data-table-pagination',\n  template: `<div class=\"navbar p-0 pagination-component\">\n  <div>\n    {{dataTable.translations.paginationRange}}:&nbsp;{{dataTable.offset < 0 ? 0 : dataTable.offset + 1}}&nbsp;-\n    {{[dataTable.offset + dataTable.limit , dataTable.itemCount] | min}}&nbsp;/&nbsp;{{dataTable.itemCount}}\n  </div>\n  <ul class=\"nav justify-content-end\">\n    <li class=\"nav-item pagination-limit\">\n      <div class=\"input-group\">\n        <div class=\"input-group-prepend\">\n          <span class=\"input-group-text\">{{dataTable.translations.paginationLimit}}:</span>\n        </div>\n        <input #limitInput type=\"number\" class=\"form-control\" min=\"1\" step=\"1\"\n               [ngModel]=\"limit\" (blur)=\"limit = limitInput.value\"\n               (keyup.enter)=\"limit = limitInput.value\"\n               (keyup.esc)=\"limitInput.value = limit\"\n               (keypress)=\"keyPress($event)\"/>\n      </div>\n    </li>\n    <li class=\"nav-item\">\n      <button [disabled]=\"dataTable.offset <= 0\" (click)=\"pageFirst()\" class=\"btn btn-default\">&laquo;</button>\n      <button [disabled]=\"dataTable.offset <= 0\" (click)=\"pageBack()\" class=\"btn btn-default\">&lsaquo;</button>\n      <div class=\"d-inline-block\">\n        <div class=\"input-group\">\n          <input #pageInput type=\"number\" class=\"form-control\" min=\"1\" step=\"1\" max=\"{{maxPage}}\"\n                 [ngModel]=\"page\" (blur)=\"page = pageInput.value\"\n                 (keyup.enter)=\"page = pageInput.value\" (keyup.esc)=\"pageInput.value = page\"\n                 (keypress)=\"keyPress($event)\"/>\n          <div class=\"input-group-append\">\n            <span class=\"input-group-text\">/&nbsp;{{dataTable.lastPage}}</span>\n          </div>\n        </div>\n      </div>\n      <button [disabled]=\"(dataTable.offset + dataTable.limit) >= dataTable.itemCount\" (click)=\"pageForward()\"\n              class=\"btn btn-default\">&rsaquo;\n      </button>\n      <button [disabled]=\"(dataTable.offset + dataTable.limit) >= dataTable.itemCount\" (click)=\"pageLast()\"\n              class=\"btn btn-default\">&raquo;\n      </button>\n    </li>\n  </ul>\n</div>\n`,\n  styles: [`.pagination-component .pagination-limit{margin-right:1rem}.pagination-component .pagination-limit input{width:75px}.pagination-component .btn{margin-top:-3px}`]\n})\nexport class DataTablePagination<T> {\n\n  constructor(@Inject(forwardRef(() => DataTable)) public dataTable: DataTable<T>) {\n  }\n\n  get maxPage() {\n    return Math.ceil(this.dataTable.itemCount / this.dataTable.limit);\n  }\n\n  get limit() {\n    return this.dataTable.limit;\n  }\n\n  set limit(value) {\n    if (Number(value) > 0) {\n      this.dataTable.limit = Math.floor(+value);\n    }\n  }\n\n  get page() {\n    return this.dataTable.page;\n  }\n\n  set page(value) {\n    if (Number(value) > 0) {\n      this.dataTable.page = Math.floor(+value);\n    }\n  }\n\n  pageBack() {\n    this.dataTable.offset -= Math.min(this.dataTable.limit, this.dataTable.offset);\n  }\n\n  pageForward() {\n    this.dataTable.offset += this.dataTable.limit;\n  }\n\n  pageFirst() {\n    this.dataTable.offset = 0;\n  }\n\n  pageLast() {\n    this.dataTable.offset = (this.maxPage - 1) * this.dataTable.limit;\n  }\n\n  keyPress(event: any) {\n    let inputChar = String.fromCharCode(event.charCode);\n    if (!(Number(inputChar) >= 0)) {\n      event.preventDefault();\n    }\n  }\n}\n","import {Component, EventEmitter, forwardRef, Inject, Input, OnDestroy, Output} from '@angular/core';\nimport {DataTable} from '../../';\n\n\n@Component({\n  selector: '[dataTableRow]',\n  template: `<tr class=\"data-table-row\"\n    [title]=\"getTooltip()\"\n    [style.background-color]=\"dataTable.getRowColor(item, index, _this)\"\n    [class.row-odd]=\"index % 2 === 0\"\n    [class.row-even]=\"index % 2 === 1\"\n    [class.selected]=\"selected\"\n    [class.clickable]=\"dataTable.selectOnRowClick\"\n    (dblclick)=\"dataTable.rowDoubleClicked(_this, $event)\"\n    (click)=\"dataTable.rowClicked(_this, $event)\">\n  <td [hide]=\"!dataTable.expandColumnVisible\" class=\"row-expand-button\"\n      (click)=\"expanded = !expanded; $event.stopPropagation(); dataTable.rowExpanded(_this, $event)\">\n    <span class=\"fa fa-arrow-circle-o-right\" [hide]=\"expanded\"></span>\n    <span class=\"fa fa-arrow-circle-o-down\" [hide]=\"!expanded\"></span>\n  </td>\n  <td [hide]=\"!dataTable.indexColumnVisible\" class=\"index-column\" [textContent]=\"displayIndex\"></td>\n  <td [hide]=\"!dataTable.selectColumnVisible\" class=\"select-column\">\n    <input type=\"checkbox\" [(ngModel)]=\"selected\"/>\n  </td>\n  <td *ngFor=\"let column of dataTable.columns\" [hide]=\"!column.visible\" [ngClass]=\"column.styleClassObject\"\n      class=\"data-column\"\n      [style.background-color]=\"column.getCellColor(_this, index)\"\n      (click)=\"dataTable.cellClicked(column, _this, $event)\">\n    <div *ngIf=\"!column.cellTemplate\" [textContent]=\"item[column.property]\"></div>\n    <ng-container *ngIf=\"column.cellTemplate\" [ngTemplateOutlet]=\"column.cellTemplate\"\n         [ngTemplateOutletContext]=\"{column: column, row: _this, item: item}\"></ng-container>\n  </td>\n</tr>\n<tr *ngIf=\"dataTable.expandableRows\" [hide]=\"!expanded\" class=\"row-expansion\">\n  <td [attr.colspan]=\"dataTable.columnCount\">\n    <ng-container [ngTemplateOutlet]=\"dataTable.expandTemplate\"\n                  [ngTemplateOutletContext]=\"{row: _this, item: item}\"></ng-container>\n  </td>\n</tr>\n`,\n  styles: [`.select-column{text-align:center}.row-expand-button{cursor:pointer;text-align:center}.clickable{cursor:pointer}`]\n})\nexport class DataTableRow<T> implements OnDestroy {\n\n  // row selection:\n  private _selected: boolean;\n  expanded: boolean;\n\n  @Input()\n  item: T;\n  @Input()\n  index: number;\n\n  @Output()\n  selectedChange = new EventEmitter();\n\n  // FIXME is there no template keyword for this in angular 2?\n  public _this = this;\n\n  constructor(@Inject(forwardRef(() => DataTable)) public dataTable: DataTable<T>) {\n  }\n\n  get selected() {\n    return this._selected;\n  }\n\n  set selected(selected) {\n    this._selected = selected;\n    this.selectedChange.emit(selected);\n  }\n\n  // other:\n  get displayIndex() {\n    if (this.dataTable.pagination) {\n      return this.dataTable.displayParams.offset + this.index + 1;\n    } else {\n      return this.index + 1;\n    }\n  }\n\n  getTooltip() {\n    if (this.dataTable.rowTooltip) {\n      return this.dataTable.rowTooltip(this.item, this, this.index);\n    }\n    return '';\n  }\n\n  ngOnDestroy() {\n    this.selected = false;\n  }\n}\n","import {DataTableColumn} from './column/column.directive';\nimport {DataTableRow} from './row/row.component';\n\nexport type RowCallback<T> = (item: any, row: DataTableRow<T>, index: number) => string;\nexport type CellCallback<T> = (item: any, row: DataTableRow<T>, column: DataTableColumn<T>, index: number) => string;\n\nexport interface DataTableTranslations {\n  indexColumn: string\n  selectColumn: string\n  expandColumn: string\n  paginationLimit: string\n  paginationRange: string\n}\n\nexport const defaultTranslations = <DataTableTranslations>{\n  indexColumn: 'index',\n  selectColumn: 'select',\n  expandColumn: 'expand',\n  paginationLimit: 'Limit',\n  paginationRange: 'Results'\n};\n\nexport interface DataTableParams {\n  offset?: number\n  limit?: number\n  sortBy?: string\n  sortAsc?: boolean\n}\n\nexport interface DataTableRowEvent<T> {\n  row?: DataTableRow<T>\n  event?: MouseEvent\n}\n\nexport interface DataTableCellEvent<T> {\n  row?: DataTableRow<T>\n  column?: DataTableColumn<T>\n  event?: MouseEvent\n}\n\nexport interface DataTableHeaderEvent<T> {\n  column?: DataTableColumn<T>\n  event?: MouseEvent\n}\n","import {\n  Component,\n  ContentChild,\n  ContentChildren,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnInit,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChildren\n} from '@angular/core';\nimport {DataTableColumn, DataTableRow, DataTableTitle} from '../../';\nimport {drag} from '../../utils/drag';\nimport {\n  DataTableCellEvent,\n  DataTableHeaderEvent,\n  DataTableParams,\n  DataTableRowEvent,\n  DataTableTranslations,\n  defaultTranslations,\n  RowCallback\n} from '../types';\n\n\n@Component({\n  selector: 'data-table',\n  template: `<div class=\"data-table-wrapper\">\n  <data-table-title *ngIf=\"title\"></data-table-title>\n\n  <div class=\"data-table-box\">\n    <table class=\"table table-condensed data-table\">\n      <thead>\n      <tr>\n        <th [hide]=\"!expandColumnVisible\" class=\"expand-column-header\">\n        <th [hide]=\"!indexColumnVisible\" class=\"index-column-header\">\n          <span [textContent]=\"indexColumnHeader\"></span>\n        </th>\n        <th [hide]=\"!selectColumnVisible\" class=\"select-column-header\">\n          <input [hide]=\"!multiSelect\" type=\"checkbox\" [(ngModel)]=\"selectAllCheckbox\"/>\n        </th>\n        <th *ngFor=\"let column of columns\" #th [hide]=\"!column.visible\" (click)=\"headerClicked(column, $event)\"\n            [class.sortable]=\"column.sortable\" [class.resizable]=\"column.resizable\"\n            [ngClass]=\"column.styleClassObject\" class=\"column-header\" [style.width]=\"column.width | px\">\n          <span *ngIf=\"!column.headerTemplate\" [textContent]=\"column.header\"></span>\n          <ng-container *ngIf=\"column.headerTemplate\" [ngTemplateOutlet]=\"column.headerTemplate\"\n                [ngTemplateOutletContext]=\"{column: column}\"></ng-container>\n          <span class=\"column-sort-icon\" *ngIf=\"column.sortable\">\n            <i class=\"fa fa-sort column-sortable-icon\" [hide]=\"column.property === sortBy\"></i>\n            <span [hide]=\"column.property !== sortBy\">\n              <i class=\"fa fa-sort-asc\" [hide]=\"sortAsc\"></i>\n              <i class=\"fa fa-sort-desc\" [hide]=\"!sortAsc\"></i>\n            </span>\n          </span>\n          <span *ngIf=\"column.resizable\" class=\"column-resize-handle\"\n                (mousedown)=\"resizeColumnStart($event, column, th)\"></span>\n        </th>\n      </tr>\n      </thead>\n      <tbody *ngFor=\"let item of items; let index=index\" class=\"data-table-row-wrapper\"\n             dataTableRow #row [item]=\"item\" [index]=\"index\" (selectedChange)=\"onRowSelectChanged(row)\">\n      </tbody>\n      <tbody class=\"substitute-rows\" *ngIf=\"pagination && substituteRows\">\n      <tr *ngFor=\"let item of substituteItems, let index = index\"\n          [class.row-odd]=\"(index + items.length) % 2 === 0\"\n          [class.row-even]=\"(index + items.length) % 2 === 1\">\n        <td [hide]=\"!expandColumnVisible\"></td>\n        <td [hide]=\"!indexColumnVisible\">&nbsp;</td>\n        <td [hide]=\"!selectColumnVisible\"></td>\n        <td *ngFor=\"let column of columns\" [hide]=\"!column.visible\">\n      </tr>\n      </tbody>\n    </table>\n    <div class=\"loading-cover\" *ngIf=\"showReloading && reloading\"></div>\n  </div>\n\n  <data-table-pagination *ngIf=\"pagination\"></data-table-pagination>\n</div>\n`,\n  styles: [`:host /deep/ .data-table.table>tbody+tbody{border-top:none}:host /deep/ .data-table.table td{vertical-align:middle}:host /deep/ .data-table>tbody>tr>td,:host /deep/ .data-table>thead>tr>th{overflow:hidden}:host /deep/ .row-odd{background-color:#f6f6f6}.data-table .substitute-rows>tr:hover,:host /deep/ .data-table .data-table-row:hover{background-color:#ececec}.data-table{box-shadow:0 0 15px #ececec;table-layout:fixed}.column-header{position:relative}.expand-column-header{width:50px}.select-column-header{width:50px;text-align:center}.index-column-header{width:40px}.column-header.sortable{cursor:pointer}.column-header .column-sort-icon{float:right}.column-header.resizable .column-sort-icon{margin-right:8px}.column-header .column-sort-icon .column-sortable-icon{color:#d3d3d3}.column-header .column-resize-handle{position:absolute;top:0;right:0;margin:0;padding:0;width:8px;height:100%;cursor:col-resize}.data-table-box{position:relative}.loading-cover{position:absolute;width:100%;height:100%;background-color:rgba(255,255,255,.3);top:0}`]\n})\nexport class DataTable<T> implements DataTableParams, OnInit {\n\n  // UI state without input:\n  indexColumnVisible: boolean;\n  selectColumnVisible: boolean;\n  expandColumnVisible: boolean;\n\n  // UI state: visible ge/set for the outside with @Input for one-time initial values\n  private _sortBy: string;\n  private _sortAsc = true;\n  private _offset = 0;\n  private _limit = 10;\n  private _items: T[] = [];\n  private _scheduledReload: number = null;\n  private _selectAllCheckbox = false;\n  private _displayParams = <DataTableParams>{};\n  private _reloading = false;\n  private _resizeInProgress = false;\n\n  selectedRow: DataTableRow<T>;\n  selectedRows: DataTableRow<T>[] = [];\n  resizeLimit = 30;\n\n  @Input()\n  itemCount: number;\n  @Input()\n  pagination = true;\n  @Input()\n  indexColumn = true;\n  @Input()\n  indexColumnHeader = '';\n  @Input()\n  rowColors: RowCallback<T>;\n  @Input()\n  rowTooltip: RowCallback<T>;\n  @Input()\n  selectColumn = false;\n  @Input()\n  multiSelect = true;\n  @Input()\n  substituteRows = true;\n  @Input()\n  expandableRows = false;\n  @Input()\n  translations: DataTableTranslations = defaultTranslations;\n  @Input()\n  selectOnRowClick = false;\n  @Input()\n  autoReload = true;\n  @Input()\n  showReloading = false;\n\n  // event handlers:\n  @Output()\n  rowClick: EventEmitter<DataTableRowEvent<T>> = new EventEmitter();\n  @Output()\n  rowExpand: EventEmitter<DataTableRowEvent<T>> = new EventEmitter();\n  @Output()\n  rowDoubleClick: EventEmitter<DataTableRowEvent<T>> = new EventEmitter();\n  @Output()\n  headerClick: EventEmitter<DataTableHeaderEvent<T>> = new EventEmitter();\n  @Output()\n  cellClick: EventEmitter<DataTableCellEvent<T>> = new EventEmitter();\n  @Output()\n  reload: EventEmitter<DataTableParams> = new EventEmitter();\n\n  // UI components:\n  @ContentChild(forwardRef(() => DataTableTitle))\n  title: DataTableTitle;\n  @ContentChildren(DataTableColumn)\n  columns: QueryList<DataTableColumn<T>>;\n  @ViewChildren(DataTableRow)\n  rows: QueryList<DataTableRow<T>>;\n  @ContentChild('expandTemplate')\n  expandTemplate: TemplateRef<any>;\n\n  @Input()\n  get items() {\n    return this._items;\n  }\n\n  set items(items: any[]) {\n    this._items = items;\n    this._onReloadFinished();\n  }\n\n  @Input()\n  get sortBy() {\n    return this._sortBy;\n  }\n\n  set sortBy(value) {\n    this._sortBy = value;\n    this._triggerReload();\n  }\n\n  @Input()\n  get sortAsc() {\n    return this._sortAsc;\n  }\n\n  set sortAsc(value) {\n    this._sortAsc = value;\n    this._triggerReload();\n  }\n\n  @Input()\n  get offset() {\n    return this._offset;\n  }\n\n  set offset(value) {\n    this._offset = value;\n    this._triggerReload();\n  }\n\n  @Input()\n  get limit() {\n    return this._limit;\n  }\n\n  set limit(value) {\n    this._limit = value;\n    this._triggerReload();\n  }\n\n  // calculated property:\n  @Input()\n  get page() {\n    return Math.floor(this.offset / this.limit) + 1;\n  }\n\n  set page(value) {\n    this.offset = (value - 1) * this.limit;\n  }\n\n  get lastPage() {\n    return Math.ceil(this.itemCount / this.limit);\n  }\n\n  get reloading() {\n    return this._reloading;\n  }\n\n  get displayParams() {\n    return this._displayParams;\n  }\n\n  get selectAllCheckbox() {\n    return this._selectAllCheckbox;\n  }\n\n  set selectAllCheckbox(value) {\n    this._selectAllCheckbox = value;\n    this._onSelectAllChanged(value);\n  }\n\n  get columnCount() {\n    let count = 0;\n    count += this.indexColumnVisible ? 1 : 0;\n    count += this.selectColumnVisible ? 1 : 0;\n    count += this.expandColumnVisible ? 1 : 0;\n    this.columns.toArray().forEach(column => {\n      count += column.visible ? 1 : 0;\n    });\n    return count;\n  }\n\n  get substituteItems() {\n    return Array.from({length: this.displayParams!.limit - this.items.length});\n  }\n\n  getRowColor(item: any, index: number, row: DataTableRow<T>) {\n    if (this.rowColors !== undefined) {\n      return (<RowCallback<T>>this.rowColors)(item, row, index);\n    }\n  }\n\n  // setting multiple observable properties simultaneously\n  sort(sortBy: string, asc: boolean) {\n    this.sortBy = sortBy;\n    this.sortAsc = asc;\n  }\n\n  reloadItems() {\n    this._reloading = true;\n    this.reload.emit(this._getRemoteParameters());\n  }\n\n  rowClicked(row: DataTableRow<T>, event: MouseEvent) {\n    this.rowClick.emit({row, event});\n  }\n\n  rowDoubleClicked(row: DataTableRow<T>, event: MouseEvent) {\n    this.rowDoubleClick.emit({row, event});\n  }\n\n  headerClicked(column: DataTableColumn<T>, event: MouseEvent) {\n    if (!this._resizeInProgress) {\n      this.headerClick.emit({column, event});\n    } else {\n      // this is because I can't prevent click from mousup of the drag end\n      this._resizeInProgress = false;\n    }\n  }\n\n  cellClicked(column: DataTableColumn<T>, row: DataTableRow<T>, event: MouseEvent) {\n    this.cellClick.emit({row, column, event});\n  }\n\n  rowExpanded(row: DataTableRow<T>, event: MouseEvent) {\n    this.rowExpand.emit({row, event});\n  }\n\n  onRowSelectChanged(row: DataTableRow<T>) {\n    // maintain the selectedRow(s) view\n    if (this.multiSelect) {\n      let index = this.selectedRows.indexOf(row);\n      if (row.selected && index < 0) {\n        this.selectedRows.push(row);\n      } else if (!row.selected && index >= 0) {\n        this.selectedRows.splice(index, 1);\n      }\n    } else {\n      if (row.selected) {\n        this.selectedRow = row;\n      } else if (this.selectedRow === row) {\n        this.selectedRow = undefined;\n      }\n    }\n    // unselect all other rows:\n    if (row.selected && !this.multiSelect) {\n      this.rows.toArray().filter(row_ => row_.selected).forEach(row_ => {\n        if (row_ !== row) { // avoid endless loop\n          row_.selected = false;\n        }\n      });\n    }\n  }\n\n  resizeColumnStart(event: MouseEvent, column: DataTableColumn<T>, columnElement: HTMLElement) {\n    this._resizeInProgress = true;\n    drag(event, {\n      move: (moveEvent: MouseEvent, dx: number) => {\n        if (this._isResizeInLimit(columnElement, dx)) {\n          column.width = columnElement.offsetWidth + dx;\n        }\n      },\n    });\n  }\n\n  // init\n  ngOnInit() {\n    this._initDefaultValues();\n    this._initDefaultClickEvents();\n    this._updateDisplayParams();\n    if (this.autoReload && this._scheduledReload == null) {\n      this.reloadItems();\n    }\n  }\n\n  private _initDefaultValues() {\n    this.indexColumnVisible = this.indexColumn;\n    this.selectColumnVisible = this.selectColumn;\n    this.expandColumnVisible = this.expandableRows;\n  }\n\n  private _initDefaultClickEvents() {\n    this.headerClick.subscribe(tableEvent => this._sortColumn(tableEvent.column));\n    if (this.selectOnRowClick) {\n      this.rowClick.subscribe(tableEvent => tableEvent.row.selected = !tableEvent.row.selected);\n    }\n  }\n\n  private _onReloadFinished() {\n    this._updateDisplayParams();\n    this._selectAllCheckbox = false;\n    this._reloading = false;\n  }\n\n  private _updateDisplayParams() {\n    this._displayParams = {\n      sortBy: this.sortBy,\n      sortAsc: this.sortAsc,\n      offset: this.offset,\n      limit: this.limit\n    };\n  }\n\n  private _triggerReload() {\n    // for avoiding cascading reloads if multiple params are set at once:\n    if (this._scheduledReload) {\n      clearTimeout(this._scheduledReload);\n    }\n    this._scheduledReload = setTimeout(() => {\n      this.reloadItems();\n    });\n  }\n\n  private _getRemoteParameters(): DataTableParams {\n    let params = <DataTableParams>{};\n\n    if (this.sortBy) {\n      params.sortBy = this.sortBy;\n      params.sortAsc = this.sortAsc;\n    }\n    if (this.pagination) {\n      params.offset = this.offset;\n      params.limit = this.limit;\n    }\n    return params;\n  }\n\n  private _sortColumn(column: DataTableColumn<T>) {\n    if (column.sortable) {\n      let ascending = this.sortBy === column.property ? !this.sortAsc : true;\n      this.sort(column.property, ascending);\n    }\n  }\n\n  private _onSelectAllChanged(value: boolean) {\n    this.rows.toArray().forEach(row => row.selected = value);\n  }\n\n  private _isResizeInLimit(columnElement: HTMLElement, dx: number) {\n    /* This is needed because CSS min-width didn't work on table-layout: fixed.\n     Without the limits, resizing can make the next column disappear completely,\n     and even increase the table width. The current implementation suffers from the fact,\n     that offsetWidth sometimes contains out-of-date values. */\n    return !((dx < 0 && (columnElement.offsetWidth + dx) <= this.resizeLimit) ||\n      !columnElement.nextElementSibling || // resizing doesn't make sense for the last visible column\n      (dx >= 0 && ((<HTMLElement> columnElement.nextElementSibling).offsetWidth + dx) <= this.resizeLimit));\n  }\n}\n","export type MoveHandler = (event: MouseEvent, dx: number, dy: number, x: number, y: number) => void;\nexport type UpHandler = (event: MouseEvent, x: number, y: number, moved: boolean) => void;\n\nexport function drag(event: MouseEvent, {move, up}: { move: MoveHandler, up?: UpHandler }) {\n\n  let startX = event.pageX;\n  let startY = event.pageY;\n  let x = startX;\n  let y = startY;\n  let moved = false;\n\n  function mouseMoveHandler(e: MouseEvent) {\n    let dx = e.pageX - x;\n    let dy = e.pageY - y;\n    x = e.pageX;\n    y = e.pageY;\n    if (dx || dy) {\n      moved = true;\n    }\n\n    move(e, dx, dy, x, y);\n\n    e.preventDefault(); // to avoid text selection\n  }\n\n  function mouseUpHandler(e: MouseEvent) {\n    x = e.pageX;\n    y = e.pageY;\n\n    document.removeEventListener('mousemove', mouseMoveHandler);\n    document.removeEventListener('mouseup', mouseUpHandler);\n\n    if (up) {\n      up(e, x, y, moved);\n    }\n  }\n\n  document.addEventListener('mousemove', mouseMoveHandler);\n  document.addEventListener('mouseup', mouseUpHandler);\n}\n","import {Component, forwardRef, HostListener, Inject} from '@angular/core';\nimport {DataTable} from '../../';\n\n@Component({\n  selector: 'data-table-title',\n  template: `<div class=\"navbar\">\n  <h4 class=\"title\" [textContent]=\"dataTable.title.title\"></h4>\n  <ng-container *ngIf=\"dataTable.title.titleTemplate\" [ngTemplateOutlet]=\"dataTable.title.titleTemplate\"\n                [ngTemplateOutletContext]=\"{items: dataTable.items}\">\n  </ng-container>\n  <div *ngIf=\"dataTable.title.controls\">\n    <button type=\"button\" class=\"btn btn-default btn-sm refresh-button\" (click)=\"dataTable.reloadItems()\">\n      <i class=\"fa fa-refresh\"></i>\n    </button>\n    <button type=\"button\" class=\"btn btn-default btn-sm column-selector-button\" [class.active]=\"columnSelectorOpen\"\n            (click)=\"columnSelectorOpen = !columnSelectorOpen; $event.stopPropagation()\">\n      <i class=\"fa fa-list\"></i>\n    </button>\n    <div class=\"column-selector-wrapper\" (click)=\"$event.stopPropagation()\">\n      <div *ngIf=\"columnSelectorOpen\" class=\"column-selector-box card\">\n        <div *ngIf=\"dataTable.expandableRows\" class=\"column-selector-fixed-column checkbox\">\n          <label>\n            <input type=\"checkbox\" [(ngModel)]=\"dataTable.expandColumnVisible\"/>\n            <span>{{dataTable.translations.expandColumn}}</span>\n          </label>\n        </div>\n        <div *ngIf=\"dataTable.indexColumn\" class=\"column-selector-fixed-column checkbox\">\n          <label>\n            <input type=\"checkbox\" [(ngModel)]=\"dataTable.indexColumnVisible\"/>\n            <span>{{dataTable.translations.indexColumn}}</span>\n          </label>\n        </div>\n        <div *ngIf=\"dataTable.selectColumn\" class=\"column-selector-fixed-column checkbox\">\n          <label>\n            <input type=\"checkbox\" [(ngModel)]=\"dataTable.selectColumnVisible\"/>\n            <span>{{dataTable.translations.selectColumn}}</span>\n          </label>\n        </div>\n        <div *ngFor=\"let column of dataTable.columns\" class=\"column-selector-column checkbox\">\n          <label>\n            <input type=\"checkbox\" [(ngModel)]=\"column.visible\"/>\n            <span [textContent]=\"column.header\"></span>\n          </label>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n`,\n  styles: [`.navbar{padding:10px 0}.navbar .title{margin:5px 0 0 5px}.column-selector-wrapper{position:relative}.column-selector-wrapper .column-selector-box{box-shadow:0 0 10px #d3d3d3;width:150px;padding:10px;position:absolute;right:0;top:1px;z-index:1060}.column-selector-wrapper .column-selector-box .checkbox{margin-bottom:4px}.column-selector-wrapper .column-selector-box .column-selector-fixed-column{font-style:italic}`]\n})\nexport class DataTableTitleComponent<T> {\n\n  columnSelectorOpen = false;\n\n  constructor(@Inject(forwardRef(() => DataTable)) public dataTable: DataTable<T>) {\n  }\n\n  @HostListener('document:click', ['$event'])\n  _closeSelector($event) {\n    this.columnSelectorOpen = false;\n  }\n}\n\n","import {ContentChild, Directive, Input, TemplateRef} from '@angular/core';\n\n@Directive({\n  selector: 'data-table-title'\n})\nexport class DataTableTitle {\n\n  @Input()\n  title = '';\n  @ContentChild('titleTemplate')\n  titleTemplate: TemplateRef<any>;\n  @Input()\n  controls = true;\n}\n","import {Directive, ElementRef, Input, Renderer} from '@angular/core';\n\n\nfunction isBlank(obj: any): boolean {\n  return obj === undefined || obj === null;\n}\n\n@Directive({selector: '[hide]'})\nexport class HideDirective {\n\n  private _prevCondition: boolean = null;\n  private _displayStyle: string;\n\n  constructor(private _elementRef: ElementRef, private _renderer: Renderer) {\n  }\n\n  @Input()\n  set hide(newCondition: boolean) {\n    this.initDisplayStyle();\n\n    if (newCondition && (isBlank(this._prevCondition) || !this._prevCondition)) {\n      this._prevCondition = true;\n      this._renderer.setElementStyle(this._elementRef.nativeElement, 'display', 'none');\n    } else if (!newCondition && (isBlank(this._prevCondition) || this._prevCondition)) {\n      this._prevCondition = false;\n      this._renderer.setElementStyle(this._elementRef.nativeElement, 'display', this._displayStyle);\n    }\n  }\n\n  private initDisplayStyle() {\n    if (this._displayStyle === undefined) {\n      let displayStyle = this._elementRef.nativeElement.style.display;\n      if (displayStyle && displayStyle !== 'none') {\n        this._displayStyle = displayStyle;\n      }\n    }\n  }\n}\n","import {Pipe, PipeTransform} from '@angular/core';\n\n@Pipe({\n  name: 'min'\n})\nexport class MinPipe implements PipeTransform {\n\n  transform(value: number[], ...args: any[]): any {\n    return Math.min.apply(null, value);\n  }\n}\n","import {Pipe, PipeTransform} from '@angular/core';\n\n@Pipe({\n  name: 'px'\n})\nexport class PxPipe implements PipeTransform {\n\n  transform(value: string | number, ...args: any[]): any {\n    if (value) {\n      return Number(value) >= 0 ? `${value}px` : value;\n    }\n  }\n}\n","import {DataTableParams} from '..';\n\n\nexport class DataTableResource<T> {\n\n  constructor(private items: T[]) {\n  }\n\n  query(params: DataTableParams, filter?: (item: T, index: number, items: T[]) => boolean): Promise<T[]> {\n\n    let result: T[] = [];\n    if (filter) {\n      result = this.items.filter(filter);\n    } else {\n      result = this.items.slice(); // shallow copy to use for sorting instead of changing the original\n    }\n\n    if (params.sortBy) {\n      result.sort((a: any, b: any) => {\n        if (typeof a[params.sortBy] === 'string') {\n          return a[params.sortBy].localeCompare(b[params.sortBy]);\n        } else {\n          return a[params.sortBy] - b[params.sortBy];\n        }\n      });\n      if (params.sortAsc === false) {\n        result.reverse();\n      }\n    }\n    if (params.offset !== undefined) {\n      if (params.limit === undefined) {\n        result = result.slice(params.offset, result.length);\n      } else {\n        result = result.slice(params.offset, params.offset + params.limit);\n      }\n    }\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => resolve(result));\n    });\n  }\n\n  count(): Promise<number> {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => resolve(this.items.length));\n    });\n  }\n}\n","import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {FormsModule} from '@angular/forms';\nimport {DataTableColumn} from './components/column/column.directive';\nimport {DataTablePagination} from './components/pagination/pagination.component';\nimport {DataTableRow} from './components/row/row.component';\nimport {DataTable} from './components/table/table.component';\nimport {DataTableTitleComponent} from './components/title/title.component';\nimport {DataTableTitle} from './components/title/title.directive';\nimport {HideDirective} from './utils/hide.directive';\nimport {MinPipe} from './utils/min.pipe';\nimport {PxPipe} from './utils/px.pipe';\n\nexport * from './components/types';\nexport * from './tools/data-table-resource';\n\nexport {DataTable, DataTableColumn, DataTableRow, DataTableTitle, DataTablePagination};\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule\n  ],\n  declarations: [\n    DataTable,\n    DataTableColumn,\n    DataTableTitle,\n    DataTableRow,\n    DataTablePagination,\n    DataTableTitleComponent,\n    PxPipe,\n    HideDirective,\n    MinPipe\n  ],\n  exports: [DataTable, DataTableColumn, DataTableTitle, DataTablePagination]\n})\nexport class DataTableModule {\n}\n"]}