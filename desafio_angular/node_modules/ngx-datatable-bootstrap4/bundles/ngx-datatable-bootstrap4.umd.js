(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/forms')) :
    typeof define === 'function' && define.amd ? define('ngx-datatable-bootstrap4', ['exports', '@angular/core', '@angular/common', '@angular/forms'], factory) :
    (factory((global['ngx-datatable-bootstrap4'] = {}),global.ng.core,global.ng.common,global.ng.forms));
}(this, (function (exports,core,common,forms) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @template T
     */
    var DataTableColumn = (function () {
        function DataTableColumn() {
            // for [ngClass]
            this.styleClassObject = {};
            this.sortable = false;
            this.resizable = false;
            this.visible = true;
        }
        /**
         * @param {?} row
         * @param {?} index
         * @return {?}
         */
        DataTableColumn.prototype.getCellColor = /**
         * @param {?} row
         * @param {?} index
         * @return {?}
         */
            function (row, index) {
                if (this.cellColors !== undefined) {
                    return ((this.cellColors))(row.item, row, this, index);
                }
            };
        /**
         * @return {?}
         */
        DataTableColumn.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this._initCellClass();
            };
        /**
         * @return {?}
         */
        DataTableColumn.prototype._initCellClass = /**
         * @return {?}
         */
            function () {
                if (!this.styleClass && this.property) {
                    if (/^[a-zA-Z0-9_]+$/.test(this.property)) {
                        this.styleClass = 'column-' + this.property;
                    }
                    else {
                        this.styleClass = 'column-' + this.property.replace(/[^a-zA-Z0-9_]/g, '');
                    }
                }
                if (this.styleClass != null) {
                    this.styleClassObject = (_a = {},
                        _a[this.styleClass] = true,
                        _a);
                }
                var _a;
            };
        DataTableColumn.decorators = [
            { type: core.Directive, args: [{
                        selector: 'data-table-column'
                    },] },
        ];
        DataTableColumn.propDecorators = {
            header: [{ type: core.Input }],
            sortable: [{ type: core.Input }],
            resizable: [{ type: core.Input }],
            property: [{ type: core.Input }],
            styleClass: [{ type: core.Input }],
            cellColors: [{ type: core.Input }],
            width: [{ type: core.Input }],
            visible: [{ type: core.Input }],
            cellTemplate: [{ type: core.ContentChild, args: ['cellTemplate',] }],
            headerTemplate: [{ type: core.ContentChild, args: ['headerTemplate',] }]
        };
        return DataTableColumn;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @template T
     */
    var DataTablePagination$$1 = (function () {
        function DataTablePagination$$1(dataTable) {
            this.dataTable = dataTable;
        }
        Object.defineProperty(DataTablePagination$$1.prototype, "maxPage", {
            get: /**
             * @return {?}
             */ function () {
                return Math.ceil(this.dataTable.itemCount / this.dataTable.limit);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataTablePagination$$1.prototype, "limit", {
            get: /**
             * @return {?}
             */ function () {
                return this.dataTable.limit;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (Number(value) > 0) {
                    this.dataTable.limit = Math.floor(+value);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataTablePagination$$1.prototype, "page", {
            get: /**
             * @return {?}
             */ function () {
                return this.dataTable.page;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (Number(value) > 0) {
                    this.dataTable.page = Math.floor(+value);
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        DataTablePagination$$1.prototype.pageBack = /**
         * @return {?}
         */
            function () {
                this.dataTable.offset -= Math.min(this.dataTable.limit, this.dataTable.offset);
            };
        /**
         * @return {?}
         */
        DataTablePagination$$1.prototype.pageForward = /**
         * @return {?}
         */
            function () {
                this.dataTable.offset += this.dataTable.limit;
            };
        /**
         * @return {?}
         */
        DataTablePagination$$1.prototype.pageFirst = /**
         * @return {?}
         */
            function () {
                this.dataTable.offset = 0;
            };
        /**
         * @return {?}
         */
        DataTablePagination$$1.prototype.pageLast = /**
         * @return {?}
         */
            function () {
                this.dataTable.offset = (this.maxPage - 1) * this.dataTable.limit;
            };
        /**
         * @param {?} event
         * @return {?}
         */
        DataTablePagination$$1.prototype.keyPress = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                var /** @type {?} */ inputChar = String.fromCharCode(event.charCode);
                if (!(Number(inputChar) >= 0)) {
                    event.preventDefault();
                }
            };
        DataTablePagination$$1.decorators = [
            { type: core.Component, args: [{
                        selector: 'data-table-pagination',
                        template: "<div class=\"navbar p-0 pagination-component\">\n  <div>\n    {{dataTable.translations.paginationRange}}:&nbsp;{{dataTable.offset < 0 ? 0 : dataTable.offset + 1}}&nbsp;-\n    {{[dataTable.offset + dataTable.limit , dataTable.itemCount] | min}}&nbsp;/&nbsp;{{dataTable.itemCount}}\n  </div>\n  <ul class=\"nav justify-content-end\">\n    <li class=\"nav-item pagination-limit\">\n      <div class=\"input-group\">\n        <div class=\"input-group-prepend\">\n          <span class=\"input-group-text\">{{dataTable.translations.paginationLimit}}:</span>\n        </div>\n        <input #limitInput type=\"number\" class=\"form-control\" min=\"1\" step=\"1\"\n               [ngModel]=\"limit\" (blur)=\"limit = limitInput.value\"\n               (keyup.enter)=\"limit = limitInput.value\"\n               (keyup.esc)=\"limitInput.value = limit\"\n               (keypress)=\"keyPress($event)\"/>\n      </div>\n    </li>\n    <li class=\"nav-item\">\n      <button [disabled]=\"dataTable.offset <= 0\" (click)=\"pageFirst()\" class=\"btn btn-default\">&laquo;</button>\n      <button [disabled]=\"dataTable.offset <= 0\" (click)=\"pageBack()\" class=\"btn btn-default\">&lsaquo;</button>\n      <div class=\"d-inline-block\">\n        <div class=\"input-group\">\n          <input #pageInput type=\"number\" class=\"form-control\" min=\"1\" step=\"1\" max=\"{{maxPage}}\"\n                 [ngModel]=\"page\" (blur)=\"page = pageInput.value\"\n                 (keyup.enter)=\"page = pageInput.value\" (keyup.esc)=\"pageInput.value = page\"\n                 (keypress)=\"keyPress($event)\"/>\n          <div class=\"input-group-append\">\n            <span class=\"input-group-text\">/&nbsp;{{dataTable.lastPage}}</span>\n          </div>\n        </div>\n      </div>\n      <button [disabled]=\"(dataTable.offset + dataTable.limit) >= dataTable.itemCount\" (click)=\"pageForward()\"\n              class=\"btn btn-default\">&rsaquo;\n      </button>\n      <button [disabled]=\"(dataTable.offset + dataTable.limit) >= dataTable.itemCount\" (click)=\"pageLast()\"\n              class=\"btn btn-default\">&raquo;\n      </button>\n    </li>\n  </ul>\n</div>\n",
                        styles: [".pagination-component .pagination-limit{margin-right:1rem}.pagination-component .pagination-limit input{width:75px}.pagination-component .btn{margin-top:-3px}"]
                    },] },
        ];
        /** @nocollapse */
        DataTablePagination$$1.ctorParameters = function () {
            return [
                { type: DataTable$$1, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return DataTable$$1; }),] }] }
            ];
        };
        return DataTablePagination$$1;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @template T
     */
    var DataTableRow$$1 = (function () {
        function DataTableRow$$1(dataTable) {
            this.dataTable = dataTable;
            this.selectedChange = new core.EventEmitter();
            this._this = this;
        }
        Object.defineProperty(DataTableRow$$1.prototype, "selected", {
            get: /**
             * @return {?}
             */ function () {
                return this._selected;
            },
            set: /**
             * @param {?} selected
             * @return {?}
             */ function (selected) {
                this._selected = selected;
                this.selectedChange.emit(selected);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataTableRow$$1.prototype, "displayIndex", {
            // other:
            get: /**
             * @return {?}
             */ function () {
                if (this.dataTable.pagination) {
                    return this.dataTable.displayParams.offset + this.index + 1;
                }
                else {
                    return this.index + 1;
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        DataTableRow$$1.prototype.getTooltip = /**
         * @return {?}
         */
            function () {
                if (this.dataTable.rowTooltip) {
                    return this.dataTable.rowTooltip(this.item, this, this.index);
                }
                return '';
            };
        /**
         * @return {?}
         */
        DataTableRow$$1.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.selected = false;
            };
        DataTableRow$$1.decorators = [
            { type: core.Component, args: [{
                        selector: '[dataTableRow]',
                        template: "<tr class=\"data-table-row\"\n    [title]=\"getTooltip()\"\n    [style.background-color]=\"dataTable.getRowColor(item, index, _this)\"\n    [class.row-odd]=\"index % 2 === 0\"\n    [class.row-even]=\"index % 2 === 1\"\n    [class.selected]=\"selected\"\n    [class.clickable]=\"dataTable.selectOnRowClick\"\n    (dblclick)=\"dataTable.rowDoubleClicked(_this, $event)\"\n    (click)=\"dataTable.rowClicked(_this, $event)\">\n  <td [hide]=\"!dataTable.expandColumnVisible\" class=\"row-expand-button\"\n      (click)=\"expanded = !expanded; $event.stopPropagation(); dataTable.rowExpanded(_this, $event)\">\n    <span class=\"fa fa-arrow-circle-o-right\" [hide]=\"expanded\"></span>\n    <span class=\"fa fa-arrow-circle-o-down\" [hide]=\"!expanded\"></span>\n  </td>\n  <td [hide]=\"!dataTable.indexColumnVisible\" class=\"index-column\" [textContent]=\"displayIndex\"></td>\n  <td [hide]=\"!dataTable.selectColumnVisible\" class=\"select-column\">\n    <input type=\"checkbox\" [(ngModel)]=\"selected\"/>\n  </td>\n  <td *ngFor=\"let column of dataTable.columns\" [hide]=\"!column.visible\" [ngClass]=\"column.styleClassObject\"\n      class=\"data-column\"\n      [style.background-color]=\"column.getCellColor(_this, index)\"\n      (click)=\"dataTable.cellClicked(column, _this, $event)\">\n    <div *ngIf=\"!column.cellTemplate\" [textContent]=\"item[column.property]\"></div>\n    <ng-container *ngIf=\"column.cellTemplate\" [ngTemplateOutlet]=\"column.cellTemplate\"\n         [ngTemplateOutletContext]=\"{column: column, row: _this, item: item}\"></ng-container>\n  </td>\n</tr>\n<tr *ngIf=\"dataTable.expandableRows\" [hide]=\"!expanded\" class=\"row-expansion\">\n  <td [attr.colspan]=\"dataTable.columnCount\">\n    <ng-container [ngTemplateOutlet]=\"dataTable.expandTemplate\"\n                  [ngTemplateOutletContext]=\"{row: _this, item: item}\"></ng-container>\n  </td>\n</tr>\n",
                        styles: [".select-column{text-align:center}.row-expand-button{cursor:pointer;text-align:center}.clickable{cursor:pointer}"]
                    },] },
        ];
        /** @nocollapse */
        DataTableRow$$1.ctorParameters = function () {
            return [
                { type: DataTable$$1, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return DataTable$$1; }),] }] }
            ];
        };
        DataTableRow$$1.propDecorators = {
            item: [{ type: core.Input }],
            index: [{ type: core.Input }],
            selectedChange: [{ type: core.Output }]
        };
        return DataTableRow$$1;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} event
     * @param {?} __1
     * @return {?}
     */
    function drag(event, _a) {
        var move = _a.move, up = _a.up;
        var /** @type {?} */ startX = event.pageX;
        var /** @type {?} */ startY = event.pageY;
        var /** @type {?} */ x = startX;
        var /** @type {?} */ y = startY;
        var /** @type {?} */ moved = false;
        /**
         * @param {?} e
         * @return {?}
         */
        function mouseMoveHandler(e) {
            var /** @type {?} */ dx = e.pageX - x;
            var /** @type {?} */ dy = e.pageY - y;
            x = e.pageX;
            y = e.pageY;
            if (dx || dy) {
                moved = true;
            }
            move(e, dx, dy, x, y);
            e.preventDefault(); // to avoid text selection
        }
        /**
         * @param {?} e
         * @return {?}
         */
        function mouseUpHandler(e) {
            x = e.pageX;
            y = e.pageY;
            document.removeEventListener('mousemove', mouseMoveHandler);
            document.removeEventListener('mouseup', mouseUpHandler);
            if (up) {
                up(e, x, y, moved);
            }
        }
        document.addEventListener('mousemove', mouseMoveHandler);
        document.addEventListener('mouseup', mouseUpHandler);
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ defaultTranslations = ({
        indexColumn: 'index',
        selectColumn: 'select',
        expandColumn: 'expand',
        paginationLimit: 'Limit',
        paginationRange: 'Results'
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @template T
     */
    var DataTable$$1 = (function () {
        function DataTable$$1() {
            this._sortAsc = true;
            this._offset = 0;
            this._limit = 10;
            this._items = [];
            this._scheduledReload = null;
            this._selectAllCheckbox = false;
            this._displayParams = /** @type {?} */ ({});
            this._reloading = false;
            this._resizeInProgress = false;
            this.selectedRows = [];
            this.resizeLimit = 30;
            this.pagination = true;
            this.indexColumn = true;
            this.indexColumnHeader = '';
            this.selectColumn = false;
            this.multiSelect = true;
            this.substituteRows = true;
            this.expandableRows = false;
            this.translations = defaultTranslations;
            this.selectOnRowClick = false;
            this.autoReload = true;
            this.showReloading = false;
            // event handlers:
            this.rowClick = new core.EventEmitter();
            this.rowExpand = new core.EventEmitter();
            this.rowDoubleClick = new core.EventEmitter();
            this.headerClick = new core.EventEmitter();
            this.cellClick = new core.EventEmitter();
            this.reload = new core.EventEmitter();
        }
        Object.defineProperty(DataTable$$1.prototype, "items", {
            get: /**
             * @return {?}
             */ function () {
                return this._items;
            },
            set: /**
             * @param {?} items
             * @return {?}
             */ function (items) {
                this._items = items;
                this._onReloadFinished();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataTable$$1.prototype, "sortBy", {
            get: /**
             * @return {?}
             */ function () {
                return this._sortBy;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._sortBy = value;
                this._triggerReload();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataTable$$1.prototype, "sortAsc", {
            get: /**
             * @return {?}
             */ function () {
                return this._sortAsc;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._sortAsc = value;
                this._triggerReload();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataTable$$1.prototype, "offset", {
            get: /**
             * @return {?}
             */ function () {
                return this._offset;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._offset = value;
                this._triggerReload();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataTable$$1.prototype, "limit", {
            get: /**
             * @return {?}
             */ function () {
                return this._limit;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._limit = value;
                this._triggerReload();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataTable$$1.prototype, "page", {
            // calculated property:
            get: /**
             * @return {?}
             */ function () {
                return Math.floor(this.offset / this.limit) + 1;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this.offset = (value - 1) * this.limit;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataTable$$1.prototype, "lastPage", {
            get: /**
             * @return {?}
             */ function () {
                return Math.ceil(this.itemCount / this.limit);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataTable$$1.prototype, "reloading", {
            get: /**
             * @return {?}
             */ function () {
                return this._reloading;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataTable$$1.prototype, "displayParams", {
            get: /**
             * @return {?}
             */ function () {
                return this._displayParams;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataTable$$1.prototype, "selectAllCheckbox", {
            get: /**
             * @return {?}
             */ function () {
                return this._selectAllCheckbox;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._selectAllCheckbox = value;
                this._onSelectAllChanged(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataTable$$1.prototype, "columnCount", {
            get: /**
             * @return {?}
             */ function () {
                var /** @type {?} */ count = 0;
                count += this.indexColumnVisible ? 1 : 0;
                count += this.selectColumnVisible ? 1 : 0;
                count += this.expandColumnVisible ? 1 : 0;
                this.columns.toArray().forEach(function (column) {
                    count += column.visible ? 1 : 0;
                });
                return count;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataTable$$1.prototype, "substituteItems", {
            get: /**
             * @return {?}
             */ function () {
                return Array.from({ length: /** @type {?} */ ((this.displayParams)).limit - this.items.length });
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} item
         * @param {?} index
         * @param {?} row
         * @return {?}
         */
        DataTable$$1.prototype.getRowColor = /**
         * @param {?} item
         * @param {?} index
         * @param {?} row
         * @return {?}
         */
            function (item, index, row) {
                if (this.rowColors !== undefined) {
                    return ((this.rowColors))(item, row, index);
                }
            };
        // setting multiple observable properties simultaneously
        /**
         * @param {?} sortBy
         * @param {?} asc
         * @return {?}
         */
        DataTable$$1.prototype.sort = /**
         * @param {?} sortBy
         * @param {?} asc
         * @return {?}
         */
            function (sortBy, asc) {
                this.sortBy = sortBy;
                this.sortAsc = asc;
            };
        /**
         * @return {?}
         */
        DataTable$$1.prototype.reloadItems = /**
         * @return {?}
         */
            function () {
                this._reloading = true;
                this.reload.emit(this._getRemoteParameters());
            };
        /**
         * @param {?} row
         * @param {?} event
         * @return {?}
         */
        DataTable$$1.prototype.rowClicked = /**
         * @param {?} row
         * @param {?} event
         * @return {?}
         */
            function (row, event) {
                this.rowClick.emit({ row: row, event: event });
            };
        /**
         * @param {?} row
         * @param {?} event
         * @return {?}
         */
        DataTable$$1.prototype.rowDoubleClicked = /**
         * @param {?} row
         * @param {?} event
         * @return {?}
         */
            function (row, event) {
                this.rowDoubleClick.emit({ row: row, event: event });
            };
        /**
         * @param {?} column
         * @param {?} event
         * @return {?}
         */
        DataTable$$1.prototype.headerClicked = /**
         * @param {?} column
         * @param {?} event
         * @return {?}
         */
            function (column, event) {
                if (!this._resizeInProgress) {
                    this.headerClick.emit({ column: column, event: event });
                }
                else {
                    // this is because I can't prevent click from mousup of the drag end
                    this._resizeInProgress = false;
                }
            };
        /**
         * @param {?} column
         * @param {?} row
         * @param {?} event
         * @return {?}
         */
        DataTable$$1.prototype.cellClicked = /**
         * @param {?} column
         * @param {?} row
         * @param {?} event
         * @return {?}
         */
            function (column, row, event) {
                this.cellClick.emit({ row: row, column: column, event: event });
            };
        /**
         * @param {?} row
         * @param {?} event
         * @return {?}
         */
        DataTable$$1.prototype.rowExpanded = /**
         * @param {?} row
         * @param {?} event
         * @return {?}
         */
            function (row, event) {
                this.rowExpand.emit({ row: row, event: event });
            };
        /**
         * @param {?} row
         * @return {?}
         */
        DataTable$$1.prototype.onRowSelectChanged = /**
         * @param {?} row
         * @return {?}
         */
            function (row) {
                // maintain the selectedRow(s) view
                if (this.multiSelect) {
                    var /** @type {?} */ index = this.selectedRows.indexOf(row);
                    if (row.selected && index < 0) {
                        this.selectedRows.push(row);
                    }
                    else if (!row.selected && index >= 0) {
                        this.selectedRows.splice(index, 1);
                    }
                }
                else {
                    if (row.selected) {
                        this.selectedRow = row;
                    }
                    else if (this.selectedRow === row) {
                        this.selectedRow = undefined;
                    }
                }
                // unselect all other rows:
                if (row.selected && !this.multiSelect) {
                    this.rows.toArray().filter(function (row_) { return row_.selected; }).forEach(function (row_) {
                        if (row_ !== row) {
                            // avoid endless loop
                            row_.selected = false;
                        }
                    });
                }
            };
        /**
         * @param {?} event
         * @param {?} column
         * @param {?} columnElement
         * @return {?}
         */
        DataTable$$1.prototype.resizeColumnStart = /**
         * @param {?} event
         * @param {?} column
         * @param {?} columnElement
         * @return {?}
         */
            function (event, column, columnElement) {
                var _this = this;
                this._resizeInProgress = true;
                drag(event, {
                    move: function (moveEvent, dx) {
                        if (_this._isResizeInLimit(columnElement, dx)) {
                            column.width = columnElement.offsetWidth + dx;
                        }
                    },
                });
            };
        // init
        /**
         * @return {?}
         */
        DataTable$$1.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this._initDefaultValues();
                this._initDefaultClickEvents();
                this._updateDisplayParams();
                if (this.autoReload && this._scheduledReload == null) {
                    this.reloadItems();
                }
            };
        /**
         * @return {?}
         */
        DataTable$$1.prototype._initDefaultValues = /**
         * @return {?}
         */
            function () {
                this.indexColumnVisible = this.indexColumn;
                this.selectColumnVisible = this.selectColumn;
                this.expandColumnVisible = this.expandableRows;
            };
        /**
         * @return {?}
         */
        DataTable$$1.prototype._initDefaultClickEvents = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.headerClick.subscribe(function (tableEvent) { return _this._sortColumn(tableEvent.column); });
                if (this.selectOnRowClick) {
                    this.rowClick.subscribe(function (tableEvent) { return tableEvent.row.selected = !tableEvent.row.selected; });
                }
            };
        /**
         * @return {?}
         */
        DataTable$$1.prototype._onReloadFinished = /**
         * @return {?}
         */
            function () {
                this._updateDisplayParams();
                this._selectAllCheckbox = false;
                this._reloading = false;
            };
        /**
         * @return {?}
         */
        DataTable$$1.prototype._updateDisplayParams = /**
         * @return {?}
         */
            function () {
                this._displayParams = {
                    sortBy: this.sortBy,
                    sortAsc: this.sortAsc,
                    offset: this.offset,
                    limit: this.limit
                };
            };
        /**
         * @return {?}
         */
        DataTable$$1.prototype._triggerReload = /**
         * @return {?}
         */
            function () {
                var _this = this;
                // for avoiding cascading reloads if multiple params are set at once:
                if (this._scheduledReload) {
                    clearTimeout(this._scheduledReload);
                }
                this._scheduledReload = setTimeout(function () {
                    _this.reloadItems();
                });
            };
        /**
         * @return {?}
         */
        DataTable$$1.prototype._getRemoteParameters = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ params = ({});
                if (this.sortBy) {
                    params.sortBy = this.sortBy;
                    params.sortAsc = this.sortAsc;
                }
                if (this.pagination) {
                    params.offset = this.offset;
                    params.limit = this.limit;
                }
                return params;
            };
        /**
         * @param {?} column
         * @return {?}
         */
        DataTable$$1.prototype._sortColumn = /**
         * @param {?} column
         * @return {?}
         */
            function (column) {
                if (column.sortable) {
                    var /** @type {?} */ ascending = this.sortBy === column.property ? !this.sortAsc : true;
                    this.sort(column.property, ascending);
                }
            };
        /**
         * @param {?} value
         * @return {?}
         */
        DataTable$$1.prototype._onSelectAllChanged = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.rows.toArray().forEach(function (row) { return row.selected = value; });
            };
        /**
         * @param {?} columnElement
         * @param {?} dx
         * @return {?}
         */
        DataTable$$1.prototype._isResizeInLimit = /**
         * @param {?} columnElement
         * @param {?} dx
         * @return {?}
         */
            function (columnElement, dx) {
                /* This is needed because CSS min-width didn't work on table-layout: fixed.
                     Without the limits, resizing can make the next column disappear completely,
                     and even increase the table width. The current implementation suffers from the fact,
                     that offsetWidth sometimes contains out-of-date values. */
                return !((dx < 0 && (columnElement.offsetWidth + dx) <= this.resizeLimit) ||
                    !columnElement.nextElementSibling || // resizing doesn't make sense for the last visible column
                    // resizing doesn't make sense for the last visible column
                    (dx >= 0 && (((columnElement.nextElementSibling)).offsetWidth + dx) <= this.resizeLimit));
            };
        DataTable$$1.decorators = [
            { type: core.Component, args: [{
                        selector: 'data-table',
                        template: "<div class=\"data-table-wrapper\">\n  <data-table-title *ngIf=\"title\"></data-table-title>\n\n  <div class=\"data-table-box\">\n    <table class=\"table table-condensed data-table\">\n      <thead>\n      <tr>\n        <th [hide]=\"!expandColumnVisible\" class=\"expand-column-header\">\n        <th [hide]=\"!indexColumnVisible\" class=\"index-column-header\">\n          <span [textContent]=\"indexColumnHeader\"></span>\n        </th>\n        <th [hide]=\"!selectColumnVisible\" class=\"select-column-header\">\n          <input [hide]=\"!multiSelect\" type=\"checkbox\" [(ngModel)]=\"selectAllCheckbox\"/>\n        </th>\n        <th *ngFor=\"let column of columns\" #th [hide]=\"!column.visible\" (click)=\"headerClicked(column, $event)\"\n            [class.sortable]=\"column.sortable\" [class.resizable]=\"column.resizable\"\n            [ngClass]=\"column.styleClassObject\" class=\"column-header\" [style.width]=\"column.width | px\">\n          <span *ngIf=\"!column.headerTemplate\" [textContent]=\"column.header\"></span>\n          <ng-container *ngIf=\"column.headerTemplate\" [ngTemplateOutlet]=\"column.headerTemplate\"\n                [ngTemplateOutletContext]=\"{column: column}\"></ng-container>\n          <span class=\"column-sort-icon\" *ngIf=\"column.sortable\">\n            <i class=\"fa fa-sort column-sortable-icon\" [hide]=\"column.property === sortBy\"></i>\n            <span [hide]=\"column.property !== sortBy\">\n              <i class=\"fa fa-sort-asc\" [hide]=\"sortAsc\"></i>\n              <i class=\"fa fa-sort-desc\" [hide]=\"!sortAsc\"></i>\n            </span>\n          </span>\n          <span *ngIf=\"column.resizable\" class=\"column-resize-handle\"\n                (mousedown)=\"resizeColumnStart($event, column, th)\"></span>\n        </th>\n      </tr>\n      </thead>\n      <tbody *ngFor=\"let item of items; let index=index\" class=\"data-table-row-wrapper\"\n             dataTableRow #row [item]=\"item\" [index]=\"index\" (selectedChange)=\"onRowSelectChanged(row)\">\n      </tbody>\n      <tbody class=\"substitute-rows\" *ngIf=\"pagination && substituteRows\">\n      <tr *ngFor=\"let item of substituteItems, let index = index\"\n          [class.row-odd]=\"(index + items.length) % 2 === 0\"\n          [class.row-even]=\"(index + items.length) % 2 === 1\">\n        <td [hide]=\"!expandColumnVisible\"></td>\n        <td [hide]=\"!indexColumnVisible\">&nbsp;</td>\n        <td [hide]=\"!selectColumnVisible\"></td>\n        <td *ngFor=\"let column of columns\" [hide]=\"!column.visible\">\n      </tr>\n      </tbody>\n    </table>\n    <div class=\"loading-cover\" *ngIf=\"showReloading && reloading\"></div>\n  </div>\n\n  <data-table-pagination *ngIf=\"pagination\"></data-table-pagination>\n</div>\n",
                        styles: [":host /deep/ .data-table.table>tbody+tbody{border-top:none}:host /deep/ .data-table.table td{vertical-align:middle}:host /deep/ .data-table>tbody>tr>td,:host /deep/ .data-table>thead>tr>th{overflow:hidden}:host /deep/ .row-odd{background-color:#f6f6f6}.data-table .substitute-rows>tr:hover,:host /deep/ .data-table .data-table-row:hover{background-color:#ececec}.data-table{box-shadow:0 0 15px #ececec;table-layout:fixed}.column-header{position:relative}.expand-column-header{width:50px}.select-column-header{width:50px;text-align:center}.index-column-header{width:40px}.column-header.sortable{cursor:pointer}.column-header .column-sort-icon{float:right}.column-header.resizable .column-sort-icon{margin-right:8px}.column-header .column-sort-icon .column-sortable-icon{color:#d3d3d3}.column-header .column-resize-handle{position:absolute;top:0;right:0;margin:0;padding:0;width:8px;height:100%;cursor:col-resize}.data-table-box{position:relative}.loading-cover{position:absolute;width:100%;height:100%;background-color:rgba(255,255,255,.3);top:0}"]
                    },] },
        ];
        DataTable$$1.propDecorators = {
            itemCount: [{ type: core.Input }],
            pagination: [{ type: core.Input }],
            indexColumn: [{ type: core.Input }],
            indexColumnHeader: [{ type: core.Input }],
            rowColors: [{ type: core.Input }],
            rowTooltip: [{ type: core.Input }],
            selectColumn: [{ type: core.Input }],
            multiSelect: [{ type: core.Input }],
            substituteRows: [{ type: core.Input }],
            expandableRows: [{ type: core.Input }],
            translations: [{ type: core.Input }],
            selectOnRowClick: [{ type: core.Input }],
            autoReload: [{ type: core.Input }],
            showReloading: [{ type: core.Input }],
            rowClick: [{ type: core.Output }],
            rowExpand: [{ type: core.Output }],
            rowDoubleClick: [{ type: core.Output }],
            headerClick: [{ type: core.Output }],
            cellClick: [{ type: core.Output }],
            reload: [{ type: core.Output }],
            title: [{ type: core.ContentChild, args: [core.forwardRef(function () { return DataTableTitle; }),] }],
            columns: [{ type: core.ContentChildren, args: [DataTableColumn,] }],
            rows: [{ type: core.ViewChildren, args: [DataTableRow$$1,] }],
            expandTemplate: [{ type: core.ContentChild, args: ['expandTemplate',] }],
            items: [{ type: core.Input }],
            sortBy: [{ type: core.Input }],
            sortAsc: [{ type: core.Input }],
            offset: [{ type: core.Input }],
            limit: [{ type: core.Input }],
            page: [{ type: core.Input }]
        };
        return DataTable$$1;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @template T
     */
    var DataTableTitleComponent = (function () {
        function DataTableTitleComponent(dataTable) {
            this.dataTable = dataTable;
            this.columnSelectorOpen = false;
        }
        /**
         * @param {?} $event
         * @return {?}
         */
        DataTableTitleComponent.prototype._closeSelector = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                this.columnSelectorOpen = false;
            };
        DataTableTitleComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'data-table-title',
                        template: "<div class=\"navbar\">\n  <h4 class=\"title\" [textContent]=\"dataTable.title.title\"></h4>\n  <ng-container *ngIf=\"dataTable.title.titleTemplate\" [ngTemplateOutlet]=\"dataTable.title.titleTemplate\"\n                [ngTemplateOutletContext]=\"{items: dataTable.items}\">\n  </ng-container>\n  <div *ngIf=\"dataTable.title.controls\">\n    <button type=\"button\" class=\"btn btn-default btn-sm refresh-button\" (click)=\"dataTable.reloadItems()\">\n      <i class=\"fa fa-refresh\"></i>\n    </button>\n    <button type=\"button\" class=\"btn btn-default btn-sm column-selector-button\" [class.active]=\"columnSelectorOpen\"\n            (click)=\"columnSelectorOpen = !columnSelectorOpen; $event.stopPropagation()\">\n      <i class=\"fa fa-list\"></i>\n    </button>\n    <div class=\"column-selector-wrapper\" (click)=\"$event.stopPropagation()\">\n      <div *ngIf=\"columnSelectorOpen\" class=\"column-selector-box card\">\n        <div *ngIf=\"dataTable.expandableRows\" class=\"column-selector-fixed-column checkbox\">\n          <label>\n            <input type=\"checkbox\" [(ngModel)]=\"dataTable.expandColumnVisible\"/>\n            <span>{{dataTable.translations.expandColumn}}</span>\n          </label>\n        </div>\n        <div *ngIf=\"dataTable.indexColumn\" class=\"column-selector-fixed-column checkbox\">\n          <label>\n            <input type=\"checkbox\" [(ngModel)]=\"dataTable.indexColumnVisible\"/>\n            <span>{{dataTable.translations.indexColumn}}</span>\n          </label>\n        </div>\n        <div *ngIf=\"dataTable.selectColumn\" class=\"column-selector-fixed-column checkbox\">\n          <label>\n            <input type=\"checkbox\" [(ngModel)]=\"dataTable.selectColumnVisible\"/>\n            <span>{{dataTable.translations.selectColumn}}</span>\n          </label>\n        </div>\n        <div *ngFor=\"let column of dataTable.columns\" class=\"column-selector-column checkbox\">\n          <label>\n            <input type=\"checkbox\" [(ngModel)]=\"column.visible\"/>\n            <span [textContent]=\"column.header\"></span>\n          </label>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n",
                        styles: [".navbar{padding:10px 0}.navbar .title{margin:5px 0 0 5px}.column-selector-wrapper{position:relative}.column-selector-wrapper .column-selector-box{box-shadow:0 0 10px #d3d3d3;width:150px;padding:10px;position:absolute;right:0;top:1px;z-index:1060}.column-selector-wrapper .column-selector-box .checkbox{margin-bottom:4px}.column-selector-wrapper .column-selector-box .column-selector-fixed-column{font-style:italic}"]
                    },] },
        ];
        /** @nocollapse */
        DataTableTitleComponent.ctorParameters = function () {
            return [
                { type: DataTable$$1, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return DataTable$$1; }),] }] }
            ];
        };
        DataTableTitleComponent.propDecorators = {
            _closeSelector: [{ type: core.HostListener, args: ['document:click', ['$event'],] }]
        };
        return DataTableTitleComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var DataTableTitle = (function () {
        function DataTableTitle() {
            this.title = '';
            this.controls = true;
        }
        DataTableTitle.decorators = [
            { type: core.Directive, args: [{
                        selector: 'data-table-title'
                    },] },
        ];
        DataTableTitle.propDecorators = {
            title: [{ type: core.Input }],
            titleTemplate: [{ type: core.ContentChild, args: ['titleTemplate',] }],
            controls: [{ type: core.Input }]
        };
        return DataTableTitle;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} obj
     * @return {?}
     */
    function isBlank(obj) {
        return obj === undefined || obj === null;
    }
    var HideDirective = (function () {
        function HideDirective(_elementRef, _renderer) {
            this._elementRef = _elementRef;
            this._renderer = _renderer;
            this._prevCondition = null;
        }
        Object.defineProperty(HideDirective.prototype, "hide", {
            set: /**
             * @param {?} newCondition
             * @return {?}
             */ function (newCondition) {
                this.initDisplayStyle();
                if (newCondition && (isBlank(this._prevCondition) || !this._prevCondition)) {
                    this._prevCondition = true;
                    this._renderer.setElementStyle(this._elementRef.nativeElement, 'display', 'none');
                }
                else if (!newCondition && (isBlank(this._prevCondition) || this._prevCondition)) {
                    this._prevCondition = false;
                    this._renderer.setElementStyle(this._elementRef.nativeElement, 'display', this._displayStyle);
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        HideDirective.prototype.initDisplayStyle = /**
         * @return {?}
         */
            function () {
                if (this._displayStyle === undefined) {
                    var /** @type {?} */ displayStyle = this._elementRef.nativeElement.style.display;
                    if (displayStyle && displayStyle !== 'none') {
                        this._displayStyle = displayStyle;
                    }
                }
            };
        HideDirective.decorators = [
            { type: core.Directive, args: [{ selector: '[hide]' },] },
        ];
        /** @nocollapse */
        HideDirective.ctorParameters = function () {
            return [
                { type: core.ElementRef },
                { type: core.Renderer }
            ];
        };
        HideDirective.propDecorators = {
            hide: [{ type: core.Input }]
        };
        return HideDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MinPipe = (function () {
        function MinPipe() {
        }
        /**
         * @param {?} value
         * @param {...?} args
         * @return {?}
         */
        MinPipe.prototype.transform = /**
         * @param {?} value
         * @param {...?} args
         * @return {?}
         */
            function (value) {
                var args = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    args[_i - 1] = arguments[_i];
                }
                return Math.min.apply(null, value);
            };
        MinPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'min'
                    },] },
        ];
        return MinPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var PxPipe = (function () {
        function PxPipe() {
        }
        /**
         * @param {?} value
         * @param {...?} args
         * @return {?}
         */
        PxPipe.prototype.transform = /**
         * @param {?} value
         * @param {...?} args
         * @return {?}
         */
            function (value) {
                var args = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    args[_i - 1] = arguments[_i];
                }
                if (value) {
                    return Number(value) >= 0 ? value + "px" : value;
                }
            };
        PxPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'px'
                    },] },
        ];
        return PxPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @template T
     */
    var /**
     * @template T
     */ DataTableResource = (function () {
        function DataTableResource(items) {
            this.items = items;
        }
        /**
         * @param {?} params
         * @param {?=} filter
         * @return {?}
         */
        DataTableResource.prototype.query = /**
         * @param {?} params
         * @param {?=} filter
         * @return {?}
         */
            function (params, filter) {
                var /** @type {?} */ result = [];
                if (filter) {
                    result = this.items.filter(filter);
                }
                else {
                    result = this.items.slice(); // shallow copy to use for sorting instead of changing the original
                }
                if (params.sortBy) {
                    result.sort(function (a, b) {
                        if (typeof a[params.sortBy] === 'string') {
                            return a[params.sortBy].localeCompare(b[params.sortBy]);
                        }
                        else {
                            return a[params.sortBy] - b[params.sortBy];
                        }
                    });
                    if (params.sortAsc === false) {
                        result.reverse();
                    }
                }
                if (params.offset !== undefined) {
                    if (params.limit === undefined) {
                        result = result.slice(params.offset, result.length);
                    }
                    else {
                        result = result.slice(params.offset, params.offset + params.limit);
                    }
                }
                return new Promise(function (resolve, reject) {
                    setTimeout(function () { return resolve(result); });
                });
            };
        /**
         * @return {?}
         */
        DataTableResource.prototype.count = /**
         * @return {?}
         */
            function () {
                var _this = this;
                return new Promise(function (resolve, reject) {
                    setTimeout(function () { return resolve(_this.items.length); });
                });
            };
        return DataTableResource;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var DataTableModule = (function () {
        function DataTableModule() {
        }
        DataTableModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            forms.FormsModule
                        ],
                        declarations: [
                            DataTable$$1,
                            DataTableColumn,
                            DataTableTitle,
                            DataTableRow$$1,
                            DataTablePagination$$1,
                            DataTableTitleComponent,
                            PxPipe,
                            HideDirective,
                            MinPipe
                        ],
                        exports: [DataTable$$1, DataTableColumn, DataTableTitle, DataTablePagination$$1]
                    },] },
        ];
        return DataTableModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    exports.DataTable = DataTable$$1;
    exports.DataTableColumn = DataTableColumn;
    exports.DataTableRow = DataTableRow$$1;
    exports.DataTableTitle = DataTableTitle;
    exports.DataTablePagination = DataTablePagination$$1;
    exports.DataTableModule = DataTableModule;
    exports.defaultTranslations = defaultTranslations;
    exports.DataTableResource = DataTableResource;
    exports.ɵa = DataTableTitleComponent;
    exports.ɵc = HideDirective;
    exports.ɵd = MinPipe;
    exports.ɵb = PxPipe;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,