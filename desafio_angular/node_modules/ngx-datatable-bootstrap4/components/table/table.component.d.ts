import { EventEmitter, OnInit, QueryList, TemplateRef } from '@angular/core';
import { DataTableColumn, DataTableRow, DataTableTitle } from '../../';
import { DataTableCellEvent, DataTableHeaderEvent, DataTableParams, DataTableRowEvent, DataTableTranslations, RowCallback } from '../types';
export declare class DataTable<T> implements DataTableParams, OnInit {
    indexColumnVisible: boolean;
    selectColumnVisible: boolean;
    expandColumnVisible: boolean;
    private _sortBy;
    private _sortAsc;
    private _offset;
    private _limit;
    private _items;
    private _scheduledReload;
    private _selectAllCheckbox;
    private _displayParams;
    private _reloading;
    private _resizeInProgress;
    selectedRow: DataTableRow<T>;
    selectedRows: DataTableRow<T>[];
    resizeLimit: number;
    itemCount: number;
    pagination: boolean;
    indexColumn: boolean;
    indexColumnHeader: string;
    rowColors: RowCallback<T>;
    rowTooltip: RowCallback<T>;
    selectColumn: boolean;
    multiSelect: boolean;
    substituteRows: boolean;
    expandableRows: boolean;
    translations: DataTableTranslations;
    selectOnRowClick: boolean;
    autoReload: boolean;
    showReloading: boolean;
    rowClick: EventEmitter<DataTableRowEvent<T>>;
    rowExpand: EventEmitter<DataTableRowEvent<T>>;
    rowDoubleClick: EventEmitter<DataTableRowEvent<T>>;
    headerClick: EventEmitter<DataTableHeaderEvent<T>>;
    cellClick: EventEmitter<DataTableCellEvent<T>>;
    reload: EventEmitter<DataTableParams>;
    title: DataTableTitle;
    columns: QueryList<DataTableColumn<T>>;
    rows: QueryList<DataTableRow<T>>;
    expandTemplate: TemplateRef<any>;
    items: any[];
    sortBy: string;
    sortAsc: boolean;
    offset: number;
    limit: number;
    page: number;
    readonly lastPage: number;
    readonly reloading: boolean;
    readonly displayParams: DataTableParams;
    selectAllCheckbox: boolean;
    readonly columnCount: number;
    readonly substituteItems: {}[];
    getRowColor(item: any, index: number, row: DataTableRow<T>): string;
    sort(sortBy: string, asc: boolean): void;
    reloadItems(): void;
    rowClicked(row: DataTableRow<T>, event: MouseEvent): void;
    rowDoubleClicked(row: DataTableRow<T>, event: MouseEvent): void;
    headerClicked(column: DataTableColumn<T>, event: MouseEvent): void;
    cellClicked(column: DataTableColumn<T>, row: DataTableRow<T>, event: MouseEvent): void;
    rowExpanded(row: DataTableRow<T>, event: MouseEvent): void;
    onRowSelectChanged(row: DataTableRow<T>): void;
    resizeColumnStart(event: MouseEvent, column: DataTableColumn<T>, columnElement: HTMLElement): void;
    ngOnInit(): void;
    private _initDefaultValues();
    private _initDefaultClickEvents();
    private _onReloadFinished();
    private _updateDisplayParams();
    private _triggerReload();
    private _getRemoteParameters();
    private _sortColumn(column);
    private _onSelectAllChanged(value);
    private _isResizeInLimit(columnElement, dx);
}
