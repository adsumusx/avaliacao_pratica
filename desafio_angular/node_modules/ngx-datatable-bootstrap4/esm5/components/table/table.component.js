/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, ContentChild, ContentChildren, EventEmitter, forwardRef, Input, Output, QueryList, TemplateRef, ViewChildren } from '@angular/core';
import { DataTableColumn, DataTableRow, DataTableTitle } from '../../';
import { drag } from '../../utils/drag';
import { defaultTranslations } from '../types';
/**
 * @template T
 */
var DataTable = /** @class */ (function () {
    function DataTable() {
        this._sortAsc = true;
        this._offset = 0;
        this._limit = 10;
        this._items = [];
        this._scheduledReload = null;
        this._selectAllCheckbox = false;
        this._displayParams = /** @type {?} */ ({});
        this._reloading = false;
        this._resizeInProgress = false;
        this.selectedRows = [];
        this.resizeLimit = 30;
        this.pagination = true;
        this.indexColumn = true;
        this.indexColumnHeader = '';
        this.selectColumn = false;
        this.multiSelect = true;
        this.substituteRows = true;
        this.expandableRows = false;
        this.translations = defaultTranslations;
        this.selectOnRowClick = false;
        this.autoReload = true;
        this.showReloading = false;
        // event handlers:
        this.rowClick = new EventEmitter();
        this.rowExpand = new EventEmitter();
        this.rowDoubleClick = new EventEmitter();
        this.headerClick = new EventEmitter();
        this.cellClick = new EventEmitter();
        this.reload = new EventEmitter();
    }
    Object.defineProperty(DataTable.prototype, "items", {
        get: /**
         * @return {?}
         */
        function () {
            return this._items;
        },
        set: /**
         * @param {?} items
         * @return {?}
         */
        function (items) {
            this._items = items;
            this._onReloadFinished();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataTable.prototype, "sortBy", {
        get: /**
         * @return {?}
         */
        function () {
            return this._sortBy;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._sortBy = value;
            this._triggerReload();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataTable.prototype, "sortAsc", {
        get: /**
         * @return {?}
         */
        function () {
            return this._sortAsc;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._sortAsc = value;
            this._triggerReload();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataTable.prototype, "offset", {
        get: /**
         * @return {?}
         */
        function () {
            return this._offset;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._offset = value;
            this._triggerReload();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataTable.prototype, "limit", {
        get: /**
         * @return {?}
         */
        function () {
            return this._limit;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._limit = value;
            this._triggerReload();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataTable.prototype, "page", {
        // calculated property:
        get: /**
         * @return {?}
         */
        function () {
            return Math.floor(this.offset / this.limit) + 1;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.offset = (value - 1) * this.limit;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataTable.prototype, "lastPage", {
        get: /**
         * @return {?}
         */
        function () {
            return Math.ceil(this.itemCount / this.limit);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataTable.prototype, "reloading", {
        get: /**
         * @return {?}
         */
        function () {
            return this._reloading;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataTable.prototype, "displayParams", {
        get: /**
         * @return {?}
         */
        function () {
            return this._displayParams;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataTable.prototype, "selectAllCheckbox", {
        get: /**
         * @return {?}
         */
        function () {
            return this._selectAllCheckbox;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._selectAllCheckbox = value;
            this._onSelectAllChanged(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataTable.prototype, "columnCount", {
        get: /**
         * @return {?}
         */
        function () {
            var /** @type {?} */ count = 0;
            count += this.indexColumnVisible ? 1 : 0;
            count += this.selectColumnVisible ? 1 : 0;
            count += this.expandColumnVisible ? 1 : 0;
            this.columns.toArray().forEach(function (column) {
                count += column.visible ? 1 : 0;
            });
            return count;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataTable.prototype, "substituteItems", {
        get: /**
         * @return {?}
         */
        function () {
            return Array.from({ length: /** @type {?} */ ((this.displayParams)).limit - this.items.length });
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} item
     * @param {?} index
     * @param {?} row
     * @return {?}
     */
    DataTable.prototype.getRowColor = /**
     * @param {?} item
     * @param {?} index
     * @param {?} row
     * @return {?}
     */
    function (item, index, row) {
        if (this.rowColors !== undefined) {
            return (/** @type {?} */ (this.rowColors))(item, row, index);
        }
    };
    // setting multiple observable properties simultaneously
    /**
     * @param {?} sortBy
     * @param {?} asc
     * @return {?}
     */
    DataTable.prototype.sort = /**
     * @param {?} sortBy
     * @param {?} asc
     * @return {?}
     */
    function (sortBy, asc) {
        this.sortBy = sortBy;
        this.sortAsc = asc;
    };
    /**
     * @return {?}
     */
    DataTable.prototype.reloadItems = /**
     * @return {?}
     */
    function () {
        this._reloading = true;
        this.reload.emit(this._getRemoteParameters());
    };
    /**
     * @param {?} row
     * @param {?} event
     * @return {?}
     */
    DataTable.prototype.rowClicked = /**
     * @param {?} row
     * @param {?} event
     * @return {?}
     */
    function (row, event) {
        this.rowClick.emit({ row: row, event: event });
    };
    /**
     * @param {?} row
     * @param {?} event
     * @return {?}
     */
    DataTable.prototype.rowDoubleClicked = /**
     * @param {?} row
     * @param {?} event
     * @return {?}
     */
    function (row, event) {
        this.rowDoubleClick.emit({ row: row, event: event });
    };
    /**
     * @param {?} column
     * @param {?} event
     * @return {?}
     */
    DataTable.prototype.headerClicked = /**
     * @param {?} column
     * @param {?} event
     * @return {?}
     */
    function (column, event) {
        if (!this._resizeInProgress) {
            this.headerClick.emit({ column: column, event: event });
        }
        else {
            // this is because I can't prevent click from mousup of the drag end
            this._resizeInProgress = false;
        }
    };
    /**
     * @param {?} column
     * @param {?} row
     * @param {?} event
     * @return {?}
     */
    DataTable.prototype.cellClicked = /**
     * @param {?} column
     * @param {?} row
     * @param {?} event
     * @return {?}
     */
    function (column, row, event) {
        this.cellClick.emit({ row: row, column: column, event: event });
    };
    /**
     * @param {?} row
     * @param {?} event
     * @return {?}
     */
    DataTable.prototype.rowExpanded = /**
     * @param {?} row
     * @param {?} event
     * @return {?}
     */
    function (row, event) {
        this.rowExpand.emit({ row: row, event: event });
    };
    /**
     * @param {?} row
     * @return {?}
     */
    DataTable.prototype.onRowSelectChanged = /**
     * @param {?} row
     * @return {?}
     */
    function (row) {
        // maintain the selectedRow(s) view
        if (this.multiSelect) {
            var /** @type {?} */ index = this.selectedRows.indexOf(row);
            if (row.selected && index < 0) {
                this.selectedRows.push(row);
            }
            else if (!row.selected && index >= 0) {
                this.selectedRows.splice(index, 1);
            }
        }
        else {
            if (row.selected) {
                this.selectedRow = row;
            }
            else if (this.selectedRow === row) {
                this.selectedRow = undefined;
            }
        }
        // unselect all other rows:
        if (row.selected && !this.multiSelect) {
            this.rows.toArray().filter(function (row_) { return row_.selected; }).forEach(function (row_) {
                if (row_ !== row) {
                    // avoid endless loop
                    row_.selected = false;
                }
            });
        }
    };
    /**
     * @param {?} event
     * @param {?} column
     * @param {?} columnElement
     * @return {?}
     */
    DataTable.prototype.resizeColumnStart = /**
     * @param {?} event
     * @param {?} column
     * @param {?} columnElement
     * @return {?}
     */
    function (event, column, columnElement) {
        var _this = this;
        this._resizeInProgress = true;
        drag(event, {
            move: function (moveEvent, dx) {
                if (_this._isResizeInLimit(columnElement, dx)) {
                    column.width = columnElement.offsetWidth + dx;
                }
            },
        });
    };
    // init
    /**
     * @return {?}
     */
    DataTable.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this._initDefaultValues();
        this._initDefaultClickEvents();
        this._updateDisplayParams();
        if (this.autoReload && this._scheduledReload == null) {
            this.reloadItems();
        }
    };
    /**
     * @return {?}
     */
    DataTable.prototype._initDefaultValues = /**
     * @return {?}
     */
    function () {
        this.indexColumnVisible = this.indexColumn;
        this.selectColumnVisible = this.selectColumn;
        this.expandColumnVisible = this.expandableRows;
    };
    /**
     * @return {?}
     */
    DataTable.prototype._initDefaultClickEvents = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.headerClick.subscribe(function (tableEvent) { return _this._sortColumn(tableEvent.column); });
        if (this.selectOnRowClick) {
            this.rowClick.subscribe(function (tableEvent) { return tableEvent.row.selected = !tableEvent.row.selected; });
        }
    };
    /**
     * @return {?}
     */
    DataTable.prototype._onReloadFinished = /**
     * @return {?}
     */
    function () {
        this._updateDisplayParams();
        this._selectAllCheckbox = false;
        this._reloading = false;
    };
    /**
     * @return {?}
     */
    DataTable.prototype._updateDisplayParams = /**
     * @return {?}
     */
    function () {
        this._displayParams = {
            sortBy: this.sortBy,
            sortAsc: this.sortAsc,
            offset: this.offset,
            limit: this.limit
        };
    };
    /**
     * @return {?}
     */
    DataTable.prototype._triggerReload = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // for avoiding cascading reloads if multiple params are set at once:
        if (this._scheduledReload) {
            clearTimeout(this._scheduledReload);
        }
        this._scheduledReload = setTimeout(function () {
            _this.reloadItems();
        });
    };
    /**
     * @return {?}
     */
    DataTable.prototype._getRemoteParameters = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ params = /** @type {?} */ ({});
        if (this.sortBy) {
            params.sortBy = this.sortBy;
            params.sortAsc = this.sortAsc;
        }
        if (this.pagination) {
            params.offset = this.offset;
            params.limit = this.limit;
        }
        return params;
    };
    /**
     * @param {?} column
     * @return {?}
     */
    DataTable.prototype._sortColumn = /**
     * @param {?} column
     * @return {?}
     */
    function (column) {
        if (column.sortable) {
            var /** @type {?} */ ascending = this.sortBy === column.property ? !this.sortAsc : true;
            this.sort(column.property, ascending);
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    DataTable.prototype._onSelectAllChanged = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.rows.toArray().forEach(function (row) { return row.selected = value; });
    };
    /**
     * @param {?} columnElement
     * @param {?} dx
     * @return {?}
     */
    DataTable.prototype._isResizeInLimit = /**
     * @param {?} columnElement
     * @param {?} dx
     * @return {?}
     */
    function (columnElement, dx) {
        /* This is needed because CSS min-width didn't work on table-layout: fixed.
             Without the limits, resizing can make the next column disappear completely,
             and even increase the table width. The current implementation suffers from the fact,
             that offsetWidth sometimes contains out-of-date values. */
        return !((dx < 0 && (columnElement.offsetWidth + dx) <= this.resizeLimit) ||
            !columnElement.nextElementSibling || // resizing doesn't make sense for the last visible column
            // resizing doesn't make sense for the last visible column
            (dx >= 0 && ((/** @type {?} */ (columnElement.nextElementSibling)).offsetWidth + dx) <= this.resizeLimit));
    };
    DataTable.decorators = [
        { type: Component, args: [{
                    selector: 'data-table',
                    template: "<div class=\"data-table-wrapper\">\n  <data-table-title *ngIf=\"title\"></data-table-title>\n\n  <div class=\"data-table-box\">\n    <table class=\"table table-condensed data-table\">\n      <thead>\n      <tr>\n        <th [hide]=\"!expandColumnVisible\" class=\"expand-column-header\">\n        <th [hide]=\"!indexColumnVisible\" class=\"index-column-header\">\n          <span [textContent]=\"indexColumnHeader\"></span>\n        </th>\n        <th [hide]=\"!selectColumnVisible\" class=\"select-column-header\">\n          <input [hide]=\"!multiSelect\" type=\"checkbox\" [(ngModel)]=\"selectAllCheckbox\"/>\n        </th>\n        <th *ngFor=\"let column of columns\" #th [hide]=\"!column.visible\" (click)=\"headerClicked(column, $event)\"\n            [class.sortable]=\"column.sortable\" [class.resizable]=\"column.resizable\"\n            [ngClass]=\"column.styleClassObject\" class=\"column-header\" [style.width]=\"column.width | px\">\n          <span *ngIf=\"!column.headerTemplate\" [textContent]=\"column.header\"></span>\n          <ng-container *ngIf=\"column.headerTemplate\" [ngTemplateOutlet]=\"column.headerTemplate\"\n                [ngTemplateOutletContext]=\"{column: column}\"></ng-container>\n          <span class=\"column-sort-icon\" *ngIf=\"column.sortable\">\n            <i class=\"fa fa-sort column-sortable-icon\" [hide]=\"column.property === sortBy\"></i>\n            <span [hide]=\"column.property !== sortBy\">\n              <i class=\"fa fa-sort-asc\" [hide]=\"sortAsc\"></i>\n              <i class=\"fa fa-sort-desc\" [hide]=\"!sortAsc\"></i>\n            </span>\n          </span>\n          <span *ngIf=\"column.resizable\" class=\"column-resize-handle\"\n                (mousedown)=\"resizeColumnStart($event, column, th)\"></span>\n        </th>\n      </tr>\n      </thead>\n      <tbody *ngFor=\"let item of items; let index=index\" class=\"data-table-row-wrapper\"\n             dataTableRow #row [item]=\"item\" [index]=\"index\" (selectedChange)=\"onRowSelectChanged(row)\">\n      </tbody>\n      <tbody class=\"substitute-rows\" *ngIf=\"pagination && substituteRows\">\n      <tr *ngFor=\"let item of substituteItems, let index = index\"\n          [class.row-odd]=\"(index + items.length) % 2 === 0\"\n          [class.row-even]=\"(index + items.length) % 2 === 1\">\n        <td [hide]=\"!expandColumnVisible\"></td>\n        <td [hide]=\"!indexColumnVisible\">&nbsp;</td>\n        <td [hide]=\"!selectColumnVisible\"></td>\n        <td *ngFor=\"let column of columns\" [hide]=\"!column.visible\">\n      </tr>\n      </tbody>\n    </table>\n    <div class=\"loading-cover\" *ngIf=\"showReloading && reloading\"></div>\n  </div>\n\n  <data-table-pagination *ngIf=\"pagination\"></data-table-pagination>\n</div>\n",
                    styles: [":host /deep/ .data-table.table>tbody+tbody{border-top:none}:host /deep/ .data-table.table td{vertical-align:middle}:host /deep/ .data-table>tbody>tr>td,:host /deep/ .data-table>thead>tr>th{overflow:hidden}:host /deep/ .row-odd{background-color:#f6f6f6}.data-table .substitute-rows>tr:hover,:host /deep/ .data-table .data-table-row:hover{background-color:#ececec}.data-table{box-shadow:0 0 15px #ececec;table-layout:fixed}.column-header{position:relative}.expand-column-header{width:50px}.select-column-header{width:50px;text-align:center}.index-column-header{width:40px}.column-header.sortable{cursor:pointer}.column-header .column-sort-icon{float:right}.column-header.resizable .column-sort-icon{margin-right:8px}.column-header .column-sort-icon .column-sortable-icon{color:#d3d3d3}.column-header .column-resize-handle{position:absolute;top:0;right:0;margin:0;padding:0;width:8px;height:100%;cursor:col-resize}.data-table-box{position:relative}.loading-cover{position:absolute;width:100%;height:100%;background-color:rgba(255,255,255,.3);top:0}"]
                },] },
    ];
    DataTable.propDecorators = {
        itemCount: [{ type: Input }],
        pagination: [{ type: Input }],
        indexColumn: [{ type: Input }],
        indexColumnHeader: [{ type: Input }],
        rowColors: [{ type: Input }],
        rowTooltip: [{ type: Input }],
        selectColumn: [{ type: Input }],
        multiSelect: [{ type: Input }],
        substituteRows: [{ type: Input }],
        expandableRows: [{ type: Input }],
        translations: [{ type: Input }],
        selectOnRowClick: [{ type: Input }],
        autoReload: [{ type: Input }],
        showReloading: [{ type: Input }],
        rowClick: [{ type: Output }],
        rowExpand: [{ type: Output }],
        rowDoubleClick: [{ type: Output }],
        headerClick: [{ type: Output }],
        cellClick: [{ type: Output }],
        reload: [{ type: Output }],
        title: [{ type: ContentChild, args: [forwardRef(function () { return DataTableTitle; }),] }],
        columns: [{ type: ContentChildren, args: [DataTableColumn,] }],
        rows: [{ type: ViewChildren, args: [DataTableRow,] }],
        expandTemplate: [{ type: ContentChild, args: ['expandTemplate',] }],
        items: [{ type: Input }],
        sortBy: [{ type: Input }],
        sortAsc: [{ type: Input }],
        offset: [{ type: Input }],
        limit: [{ type: Input }],
        page: [{ type: Input }]
    };
    return DataTable;
}());
export { DataTable };
function DataTable_tsickle_Closure_declarations() {
    /** @type {?} */
    DataTable.prototype.indexColumnVisible;
    /** @type {?} */
    DataTable.prototype.selectColumnVisible;
    /** @type {?} */
    DataTable.prototype.expandColumnVisible;
    /** @type {?} */
    DataTable.prototype._sortBy;
    /** @type {?} */
    DataTable.prototype._sortAsc;
    /** @type {?} */
    DataTable.prototype._offset;
    /** @type {?} */
    DataTable.prototype._limit;
    /** @type {?} */
    DataTable.prototype._items;
    /** @type {?} */
    DataTable.prototype._scheduledReload;
    /** @type {?} */
    DataTable.prototype._selectAllCheckbox;
    /** @type {?} */
    DataTable.prototype._displayParams;
    /** @type {?} */
    DataTable.prototype._reloading;
    /** @type {?} */
    DataTable.prototype._resizeInProgress;
    /** @type {?} */
    DataTable.prototype.selectedRow;
    /** @type {?} */
    DataTable.prototype.selectedRows;
    /** @type {?} */
    DataTable.prototype.resizeLimit;
    /** @type {?} */
    DataTable.prototype.itemCount;
    /** @type {?} */
    DataTable.prototype.pagination;
    /** @type {?} */
    DataTable.prototype.indexColumn;
    /** @type {?} */
    DataTable.prototype.indexColumnHeader;
    /** @type {?} */
    DataTable.prototype.rowColors;
    /** @type {?} */
    DataTable.prototype.rowTooltip;
    /** @type {?} */
    DataTable.prototype.selectColumn;
    /** @type {?} */
    DataTable.prototype.multiSelect;
    /** @type {?} */
    DataTable.prototype.substituteRows;
    /** @type {?} */
    DataTable.prototype.expandableRows;
    /** @type {?} */
    DataTable.prototype.translations;
    /** @type {?} */
    DataTable.prototype.selectOnRowClick;
    /** @type {?} */
    DataTable.prototype.autoReload;
    /** @type {?} */
    DataTable.prototype.showReloading;
    /** @type {?} */
    DataTable.prototype.rowClick;
    /** @type {?} */
    DataTable.prototype.rowExpand;
    /** @type {?} */
    DataTable.prototype.rowDoubleClick;
    /** @type {?} */
    DataTable.prototype.headerClick;
    /** @type {?} */
    DataTable.prototype.cellClick;
    /** @type {?} */
    DataTable.prototype.reload;
    /** @type {?} */
    DataTable.prototype.title;
    /** @type {?} */
    DataTable.prototype.columns;
    /** @type {?} */
    DataTable.prototype.rows;
    /** @type {?} */
    DataTable.prototype.expandTemplate;
}

//# sourceMappingURL=data:application/json;base64,