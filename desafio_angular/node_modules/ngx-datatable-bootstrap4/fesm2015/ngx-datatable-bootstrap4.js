import { ContentChild, Directive, Input, Component, forwardRef, Inject, EventEmitter, Output, ContentChildren, ViewChildren, HostListener, ElementRef, Renderer, Pipe, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @template T
 */
class DataTableColumn {
    constructor() {
        // for [ngClass]
        this.styleClassObject = {};
        this.sortable = false;
        this.resizable = false;
        this.visible = true;
    }
    /**
     * @param {?} row
     * @param {?} index
     * @return {?}
     */
    getCellColor(row, index) {
        if (this.cellColors !== undefined) {
            return (/** @type {?} */ (this.cellColors))(row.item, row, this, index);
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this._initCellClass();
    }
    /**
     * @return {?}
     */
    _initCellClass() {
        if (!this.styleClass && this.property) {
            if (/^[a-zA-Z0-9_]+$/.test(this.property)) {
                this.styleClass = 'column-' + this.property;
            }
            else {
                this.styleClass = 'column-' + this.property.replace(/[^a-zA-Z0-9_]/g, '');
            }
        }
        if (this.styleClass != null) {
            this.styleClassObject = {
                [this.styleClass]: true
            };
        }
    }
}
DataTableColumn.decorators = [
    { type: Directive, args: [{
                selector: 'data-table-column'
            },] },
];
DataTableColumn.propDecorators = {
    header: [{ type: Input }],
    sortable: [{ type: Input }],
    resizable: [{ type: Input }],
    property: [{ type: Input }],
    styleClass: [{ type: Input }],
    cellColors: [{ type: Input }],
    width: [{ type: Input }],
    visible: [{ type: Input }],
    cellTemplate: [{ type: ContentChild, args: ['cellTemplate',] }],
    headerTemplate: [{ type: ContentChild, args: ['headerTemplate',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @template T
 */
class DataTablePagination$$1 {
    /**
     * @param {?} dataTable
     */
    constructor(dataTable) {
        this.dataTable = dataTable;
    }
    /**
     * @return {?}
     */
    get maxPage() {
        return Math.ceil(this.dataTable.itemCount / this.dataTable.limit);
    }
    /**
     * @return {?}
     */
    get limit() {
        return this.dataTable.limit;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set limit(value) {
        if (Number(value) > 0) {
            this.dataTable.limit = Math.floor(+value);
        }
    }
    /**
     * @return {?}
     */
    get page() {
        return this.dataTable.page;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set page(value) {
        if (Number(value) > 0) {
            this.dataTable.page = Math.floor(+value);
        }
    }
    /**
     * @return {?}
     */
    pageBack() {
        this.dataTable.offset -= Math.min(this.dataTable.limit, this.dataTable.offset);
    }
    /**
     * @return {?}
     */
    pageForward() {
        this.dataTable.offset += this.dataTable.limit;
    }
    /**
     * @return {?}
     */
    pageFirst() {
        this.dataTable.offset = 0;
    }
    /**
     * @return {?}
     */
    pageLast() {
        this.dataTable.offset = (this.maxPage - 1) * this.dataTable.limit;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    keyPress(event) {
        let /** @type {?} */ inputChar = String.fromCharCode(event.charCode);
        if (!(Number(inputChar) >= 0)) {
            event.preventDefault();
        }
    }
}
DataTablePagination$$1.decorators = [
    { type: Component, args: [{
                selector: 'data-table-pagination',
                template: `<div class="navbar p-0 pagination-component">
  <div>
    {{dataTable.translations.paginationRange}}:&nbsp;{{dataTable.offset < 0 ? 0 : dataTable.offset + 1}}&nbsp;-
    {{[dataTable.offset + dataTable.limit , dataTable.itemCount] | min}}&nbsp;/&nbsp;{{dataTable.itemCount}}
  </div>
  <ul class="nav justify-content-end">
    <li class="nav-item pagination-limit">
      <div class="input-group">
        <div class="input-group-prepend">
          <span class="input-group-text">{{dataTable.translations.paginationLimit}}:</span>
        </div>
        <input #limitInput type="number" class="form-control" min="1" step="1"
               [ngModel]="limit" (blur)="limit = limitInput.value"
               (keyup.enter)="limit = limitInput.value"
               (keyup.esc)="limitInput.value = limit"
               (keypress)="keyPress($event)"/>
      </div>
    </li>
    <li class="nav-item">
      <button [disabled]="dataTable.offset <= 0" (click)="pageFirst()" class="btn btn-default">&laquo;</button>
      <button [disabled]="dataTable.offset <= 0" (click)="pageBack()" class="btn btn-default">&lsaquo;</button>
      <div class="d-inline-block">
        <div class="input-group">
          <input #pageInput type="number" class="form-control" min="1" step="1" max="{{maxPage}}"
                 [ngModel]="page" (blur)="page = pageInput.value"
                 (keyup.enter)="page = pageInput.value" (keyup.esc)="pageInput.value = page"
                 (keypress)="keyPress($event)"/>
          <div class="input-group-append">
            <span class="input-group-text">/&nbsp;{{dataTable.lastPage}}</span>
          </div>
        </div>
      </div>
      <button [disabled]="(dataTable.offset + dataTable.limit) >= dataTable.itemCount" (click)="pageForward()"
              class="btn btn-default">&rsaquo;
      </button>
      <button [disabled]="(dataTable.offset + dataTable.limit) >= dataTable.itemCount" (click)="pageLast()"
              class="btn btn-default">&raquo;
      </button>
    </li>
  </ul>
</div>
`,
                styles: [`.pagination-component .pagination-limit{margin-right:1rem}.pagination-component .pagination-limit input{width:75px}.pagination-component .btn{margin-top:-3px}`]
            },] },
];
/** @nocollapse */
DataTablePagination$$1.ctorParameters = () => [
    { type: DataTable$$1, decorators: [{ type: Inject, args: [forwardRef(() => DataTable$$1),] }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @template T
 */
class DataTableRow$$1 {
    /**
     * @param {?} dataTable
     */
    constructor(dataTable) {
        this.dataTable = dataTable;
        this.selectedChange = new EventEmitter();
        this._this = this;
    }
    /**
     * @return {?}
     */
    get selected() {
        return this._selected;
    }
    /**
     * @param {?} selected
     * @return {?}
     */
    set selected(selected) {
        this._selected = selected;
        this.selectedChange.emit(selected);
    }
    /**
     * @return {?}
     */
    get displayIndex() {
        if (this.dataTable.pagination) {
            return this.dataTable.displayParams.offset + this.index + 1;
        }
        else {
            return this.index + 1;
        }
    }
    /**
     * @return {?}
     */
    getTooltip() {
        if (this.dataTable.rowTooltip) {
            return this.dataTable.rowTooltip(this.item, this, this.index);
        }
        return '';
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.selected = false;
    }
}
DataTableRow$$1.decorators = [
    { type: Component, args: [{
                selector: '[dataTableRow]',
                template: `<tr class="data-table-row"
    [title]="getTooltip()"
    [style.background-color]="dataTable.getRowColor(item, index, _this)"
    [class.row-odd]="index % 2 === 0"
    [class.row-even]="index % 2 === 1"
    [class.selected]="selected"
    [class.clickable]="dataTable.selectOnRowClick"
    (dblclick)="dataTable.rowDoubleClicked(_this, $event)"
    (click)="dataTable.rowClicked(_this, $event)">
  <td [hide]="!dataTable.expandColumnVisible" class="row-expand-button"
      (click)="expanded = !expanded; $event.stopPropagation(); dataTable.rowExpanded(_this, $event)">
    <span class="fa fa-arrow-circle-o-right" [hide]="expanded"></span>
    <span class="fa fa-arrow-circle-o-down" [hide]="!expanded"></span>
  </td>
  <td [hide]="!dataTable.indexColumnVisible" class="index-column" [textContent]="displayIndex"></td>
  <td [hide]="!dataTable.selectColumnVisible" class="select-column">
    <input type="checkbox" [(ngModel)]="selected"/>
  </td>
  <td *ngFor="let column of dataTable.columns" [hide]="!column.visible" [ngClass]="column.styleClassObject"
      class="data-column"
      [style.background-color]="column.getCellColor(_this, index)"
      (click)="dataTable.cellClicked(column, _this, $event)">
    <div *ngIf="!column.cellTemplate" [textContent]="item[column.property]"></div>
    <ng-container *ngIf="column.cellTemplate" [ngTemplateOutlet]="column.cellTemplate"
         [ngTemplateOutletContext]="{column: column, row: _this, item: item}"></ng-container>
  </td>
</tr>
<tr *ngIf="dataTable.expandableRows" [hide]="!expanded" class="row-expansion">
  <td [attr.colspan]="dataTable.columnCount">
    <ng-container [ngTemplateOutlet]="dataTable.expandTemplate"
                  [ngTemplateOutletContext]="{row: _this, item: item}"></ng-container>
  </td>
</tr>
`,
                styles: [`.select-column{text-align:center}.row-expand-button{cursor:pointer;text-align:center}.clickable{cursor:pointer}`]
            },] },
];
/** @nocollapse */
DataTableRow$$1.ctorParameters = () => [
    { type: DataTable$$1, decorators: [{ type: Inject, args: [forwardRef(() => DataTable$$1),] }] }
];
DataTableRow$$1.propDecorators = {
    item: [{ type: Input }],
    index: [{ type: Input }],
    selectedChange: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @param {?} event
 * @param {?} __1
 * @return {?}
 */
function drag(event, { move, up }) {
    let /** @type {?} */ startX = event.pageX;
    let /** @type {?} */ startY = event.pageY;
    let /** @type {?} */ x = startX;
    let /** @type {?} */ y = startY;
    let /** @type {?} */ moved = false;
    /**
     * @param {?} e
     * @return {?}
     */
    function mouseMoveHandler(e) {
        let /** @type {?} */ dx = e.pageX - x;
        let /** @type {?} */ dy = e.pageY - y;
        x = e.pageX;
        y = e.pageY;
        if (dx || dy) {
            moved = true;
        }
        move(e, dx, dy, x, y);
        e.preventDefault(); // to avoid text selection
    }
    /**
     * @param {?} e
     * @return {?}
     */
    function mouseUpHandler(e) {
        x = e.pageX;
        y = e.pageY;
        document.removeEventListener('mousemove', mouseMoveHandler);
        document.removeEventListener('mouseup', mouseUpHandler);
        if (up) {
            up(e, x, y, moved);
        }
    }
    document.addEventListener('mousemove', mouseMoveHandler);
    document.addEventListener('mouseup', mouseUpHandler);
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const /** @type {?} */ defaultTranslations = /** @type {?} */ ({
    indexColumn: 'index',
    selectColumn: 'select',
    expandColumn: 'expand',
    paginationLimit: 'Limit',
    paginationRange: 'Results'
});

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @template T
 */
class DataTable$$1 {
    constructor() {
        this._sortAsc = true;
        this._offset = 0;
        this._limit = 10;
        this._items = [];
        this._scheduledReload = null;
        this._selectAllCheckbox = false;
        this._displayParams = /** @type {?} */ ({});
        this._reloading = false;
        this._resizeInProgress = false;
        this.selectedRows = [];
        this.resizeLimit = 30;
        this.pagination = true;
        this.indexColumn = true;
        this.indexColumnHeader = '';
        this.selectColumn = false;
        this.multiSelect = true;
        this.substituteRows = true;
        this.expandableRows = false;
        this.translations = defaultTranslations;
        this.selectOnRowClick = false;
        this.autoReload = true;
        this.showReloading = false;
        // event handlers:
        this.rowClick = new EventEmitter();
        this.rowExpand = new EventEmitter();
        this.rowDoubleClick = new EventEmitter();
        this.headerClick = new EventEmitter();
        this.cellClick = new EventEmitter();
        this.reload = new EventEmitter();
    }
    /**
     * @return {?}
     */
    get items() {
        return this._items;
    }
    /**
     * @param {?} items
     * @return {?}
     */
    set items(items) {
        this._items = items;
        this._onReloadFinished();
    }
    /**
     * @return {?}
     */
    get sortBy() {
        return this._sortBy;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set sortBy(value) {
        this._sortBy = value;
        this._triggerReload();
    }
    /**
     * @return {?}
     */
    get sortAsc() {
        return this._sortAsc;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set sortAsc(value) {
        this._sortAsc = value;
        this._triggerReload();
    }
    /**
     * @return {?}
     */
    get offset() {
        return this._offset;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set offset(value) {
        this._offset = value;
        this._triggerReload();
    }
    /**
     * @return {?}
     */
    get limit() {
        return this._limit;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set limit(value) {
        this._limit = value;
        this._triggerReload();
    }
    /**
     * @return {?}
     */
    get page() {
        return Math.floor(this.offset / this.limit) + 1;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set page(value) {
        this.offset = (value - 1) * this.limit;
    }
    /**
     * @return {?}
     */
    get lastPage() {
        return Math.ceil(this.itemCount / this.limit);
    }
    /**
     * @return {?}
     */
    get reloading() {
        return this._reloading;
    }
    /**
     * @return {?}
     */
    get displayParams() {
        return this._displayParams;
    }
    /**
     * @return {?}
     */
    get selectAllCheckbox() {
        return this._selectAllCheckbox;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set selectAllCheckbox(value) {
        this._selectAllCheckbox = value;
        this._onSelectAllChanged(value);
    }
    /**
     * @return {?}
     */
    get columnCount() {
        let /** @type {?} */ count = 0;
        count += this.indexColumnVisible ? 1 : 0;
        count += this.selectColumnVisible ? 1 : 0;
        count += this.expandColumnVisible ? 1 : 0;
        this.columns.toArray().forEach(column => {
            count += column.visible ? 1 : 0;
        });
        return count;
    }
    /**
     * @return {?}
     */
    get substituteItems() {
        return Array.from({ length: /** @type {?} */ ((this.displayParams)).limit - this.items.length });
    }
    /**
     * @param {?} item
     * @param {?} index
     * @param {?} row
     * @return {?}
     */
    getRowColor(item, index, row) {
        if (this.rowColors !== undefined) {
            return (/** @type {?} */ (this.rowColors))(item, row, index);
        }
    }
    /**
     * @param {?} sortBy
     * @param {?} asc
     * @return {?}
     */
    sort(sortBy, asc) {
        this.sortBy = sortBy;
        this.sortAsc = asc;
    }
    /**
     * @return {?}
     */
    reloadItems() {
        this._reloading = true;
        this.reload.emit(this._getRemoteParameters());
    }
    /**
     * @param {?} row
     * @param {?} event
     * @return {?}
     */
    rowClicked(row, event) {
        this.rowClick.emit({ row, event });
    }
    /**
     * @param {?} row
     * @param {?} event
     * @return {?}
     */
    rowDoubleClicked(row, event) {
        this.rowDoubleClick.emit({ row, event });
    }
    /**
     * @param {?} column
     * @param {?} event
     * @return {?}
     */
    headerClicked(column, event) {
        if (!this._resizeInProgress) {
            this.headerClick.emit({ column, event });
        }
        else {
            // this is because I can't prevent click from mousup of the drag end
            this._resizeInProgress = false;
        }
    }
    /**
     * @param {?} column
     * @param {?} row
     * @param {?} event
     * @return {?}
     */
    cellClicked(column, row, event) {
        this.cellClick.emit({ row, column, event });
    }
    /**
     * @param {?} row
     * @param {?} event
     * @return {?}
     */
    rowExpanded(row, event) {
        this.rowExpand.emit({ row, event });
    }
    /**
     * @param {?} row
     * @return {?}
     */
    onRowSelectChanged(row) {
        // maintain the selectedRow(s) view
        if (this.multiSelect) {
            let /** @type {?} */ index = this.selectedRows.indexOf(row);
            if (row.selected && index < 0) {
                this.selectedRows.push(row);
            }
            else if (!row.selected && index >= 0) {
                this.selectedRows.splice(index, 1);
            }
        }
        else {
            if (row.selected) {
                this.selectedRow = row;
            }
            else if (this.selectedRow === row) {
                this.selectedRow = undefined;
            }
        }
        // unselect all other rows:
        if (row.selected && !this.multiSelect) {
            this.rows.toArray().filter(row_ => row_.selected).forEach(row_ => {
                if (row_ !== row) {
                    // avoid endless loop
                    row_.selected = false;
                }
            });
        }
    }
    /**
     * @param {?} event
     * @param {?} column
     * @param {?} columnElement
     * @return {?}
     */
    resizeColumnStart(event, column, columnElement) {
        this._resizeInProgress = true;
        drag(event, {
            move: (moveEvent, dx) => {
                if (this._isResizeInLimit(columnElement, dx)) {
                    column.width = columnElement.offsetWidth + dx;
                }
            },
        });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this._initDefaultValues();
        this._initDefaultClickEvents();
        this._updateDisplayParams();
        if (this.autoReload && this._scheduledReload == null) {
            this.reloadItems();
        }
    }
    /**
     * @return {?}
     */
    _initDefaultValues() {
        this.indexColumnVisible = this.indexColumn;
        this.selectColumnVisible = this.selectColumn;
        this.expandColumnVisible = this.expandableRows;
    }
    /**
     * @return {?}
     */
    _initDefaultClickEvents() {
        this.headerClick.subscribe(tableEvent => this._sortColumn(tableEvent.column));
        if (this.selectOnRowClick) {
            this.rowClick.subscribe(tableEvent => tableEvent.row.selected = !tableEvent.row.selected);
        }
    }
    /**
     * @return {?}
     */
    _onReloadFinished() {
        this._updateDisplayParams();
        this._selectAllCheckbox = false;
        this._reloading = false;
    }
    /**
     * @return {?}
     */
    _updateDisplayParams() {
        this._displayParams = {
            sortBy: this.sortBy,
            sortAsc: this.sortAsc,
            offset: this.offset,
            limit: this.limit
        };
    }
    /**
     * @return {?}
     */
    _triggerReload() {
        // for avoiding cascading reloads if multiple params are set at once:
        if (this._scheduledReload) {
            clearTimeout(this._scheduledReload);
        }
        this._scheduledReload = setTimeout(() => {
            this.reloadItems();
        });
    }
    /**
     * @return {?}
     */
    _getRemoteParameters() {
        let /** @type {?} */ params = /** @type {?} */ ({});
        if (this.sortBy) {
            params.sortBy = this.sortBy;
            params.sortAsc = this.sortAsc;
        }
        if (this.pagination) {
            params.offset = this.offset;
            params.limit = this.limit;
        }
        return params;
    }
    /**
     * @param {?} column
     * @return {?}
     */
    _sortColumn(column) {
        if (column.sortable) {
            let /** @type {?} */ ascending = this.sortBy === column.property ? !this.sortAsc : true;
            this.sort(column.property, ascending);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    _onSelectAllChanged(value) {
        this.rows.toArray().forEach(row => row.selected = value);
    }
    /**
     * @param {?} columnElement
     * @param {?} dx
     * @return {?}
     */
    _isResizeInLimit(columnElement, dx) {
        /* This is needed because CSS min-width didn't work on table-layout: fixed.
             Without the limits, resizing can make the next column disappear completely,
             and even increase the table width. The current implementation suffers from the fact,
             that offsetWidth sometimes contains out-of-date values. */
        return !((dx < 0 && (columnElement.offsetWidth + dx) <= this.resizeLimit) ||
            !columnElement.nextElementSibling || // resizing doesn't make sense for the last visible column
            // resizing doesn't make sense for the last visible column
            (dx >= 0 && ((/** @type {?} */ (columnElement.nextElementSibling)).offsetWidth + dx) <= this.resizeLimit));
    }
}
DataTable$$1.decorators = [
    { type: Component, args: [{
                selector: 'data-table',
                template: `<div class="data-table-wrapper">
  <data-table-title *ngIf="title"></data-table-title>

  <div class="data-table-box">
    <table class="table table-condensed data-table">
      <thead>
      <tr>
        <th [hide]="!expandColumnVisible" class="expand-column-header">
        <th [hide]="!indexColumnVisible" class="index-column-header">
          <span [textContent]="indexColumnHeader"></span>
        </th>
        <th [hide]="!selectColumnVisible" class="select-column-header">
          <input [hide]="!multiSelect" type="checkbox" [(ngModel)]="selectAllCheckbox"/>
        </th>
        <th *ngFor="let column of columns" #th [hide]="!column.visible" (click)="headerClicked(column, $event)"
            [class.sortable]="column.sortable" [class.resizable]="column.resizable"
            [ngClass]="column.styleClassObject" class="column-header" [style.width]="column.width | px">
          <span *ngIf="!column.headerTemplate" [textContent]="column.header"></span>
          <ng-container *ngIf="column.headerTemplate" [ngTemplateOutlet]="column.headerTemplate"
                [ngTemplateOutletContext]="{column: column}"></ng-container>
          <span class="column-sort-icon" *ngIf="column.sortable">
            <i class="fa fa-sort column-sortable-icon" [hide]="column.property === sortBy"></i>
            <span [hide]="column.property !== sortBy">
              <i class="fa fa-sort-asc" [hide]="sortAsc"></i>
              <i class="fa fa-sort-desc" [hide]="!sortAsc"></i>
            </span>
          </span>
          <span *ngIf="column.resizable" class="column-resize-handle"
                (mousedown)="resizeColumnStart($event, column, th)"></span>
        </th>
      </tr>
      </thead>
      <tbody *ngFor="let item of items; let index=index" class="data-table-row-wrapper"
             dataTableRow #row [item]="item" [index]="index" (selectedChange)="onRowSelectChanged(row)">
      </tbody>
      <tbody class="substitute-rows" *ngIf="pagination && substituteRows">
      <tr *ngFor="let item of substituteItems, let index = index"
          [class.row-odd]="(index + items.length) % 2 === 0"
          [class.row-even]="(index + items.length) % 2 === 1">
        <td [hide]="!expandColumnVisible"></td>
        <td [hide]="!indexColumnVisible">&nbsp;</td>
        <td [hide]="!selectColumnVisible"></td>
        <td *ngFor="let column of columns" [hide]="!column.visible">
      </tr>
      </tbody>
    </table>
    <div class="loading-cover" *ngIf="showReloading && reloading"></div>
  </div>

  <data-table-pagination *ngIf="pagination"></data-table-pagination>
</div>
`,
                styles: [`:host /deep/ .data-table.table>tbody+tbody{border-top:none}:host /deep/ .data-table.table td{vertical-align:middle}:host /deep/ .data-table>tbody>tr>td,:host /deep/ .data-table>thead>tr>th{overflow:hidden}:host /deep/ .row-odd{background-color:#f6f6f6}.data-table .substitute-rows>tr:hover,:host /deep/ .data-table .data-table-row:hover{background-color:#ececec}.data-table{box-shadow:0 0 15px #ececec;table-layout:fixed}.column-header{position:relative}.expand-column-header{width:50px}.select-column-header{width:50px;text-align:center}.index-column-header{width:40px}.column-header.sortable{cursor:pointer}.column-header .column-sort-icon{float:right}.column-header.resizable .column-sort-icon{margin-right:8px}.column-header .column-sort-icon .column-sortable-icon{color:#d3d3d3}.column-header .column-resize-handle{position:absolute;top:0;right:0;margin:0;padding:0;width:8px;height:100%;cursor:col-resize}.data-table-box{position:relative}.loading-cover{position:absolute;width:100%;height:100%;background-color:rgba(255,255,255,.3);top:0}`]
            },] },
];
DataTable$$1.propDecorators = {
    itemCount: [{ type: Input }],
    pagination: [{ type: Input }],
    indexColumn: [{ type: Input }],
    indexColumnHeader: [{ type: Input }],
    rowColors: [{ type: Input }],
    rowTooltip: [{ type: Input }],
    selectColumn: [{ type: Input }],
    multiSelect: [{ type: Input }],
    substituteRows: [{ type: Input }],
    expandableRows: [{ type: Input }],
    translations: [{ type: Input }],
    selectOnRowClick: [{ type: Input }],
    autoReload: [{ type: Input }],
    showReloading: [{ type: Input }],
    rowClick: [{ type: Output }],
    rowExpand: [{ type: Output }],
    rowDoubleClick: [{ type: Output }],
    headerClick: [{ type: Output }],
    cellClick: [{ type: Output }],
    reload: [{ type: Output }],
    title: [{ type: ContentChild, args: [forwardRef(() => DataTableTitle),] }],
    columns: [{ type: ContentChildren, args: [DataTableColumn,] }],
    rows: [{ type: ViewChildren, args: [DataTableRow$$1,] }],
    expandTemplate: [{ type: ContentChild, args: ['expandTemplate',] }],
    items: [{ type: Input }],
    sortBy: [{ type: Input }],
    sortAsc: [{ type: Input }],
    offset: [{ type: Input }],
    limit: [{ type: Input }],
    page: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @template T
 */
class DataTableTitleComponent {
    /**
     * @param {?} dataTable
     */
    constructor(dataTable) {
        this.dataTable = dataTable;
        this.columnSelectorOpen = false;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    _closeSelector($event) {
        this.columnSelectorOpen = false;
    }
}
DataTableTitleComponent.decorators = [
    { type: Component, args: [{
                selector: 'data-table-title',
                template: `<div class="navbar">
  <h4 class="title" [textContent]="dataTable.title.title"></h4>
  <ng-container *ngIf="dataTable.title.titleTemplate" [ngTemplateOutlet]="dataTable.title.titleTemplate"
                [ngTemplateOutletContext]="{items: dataTable.items}">
  </ng-container>
  <div *ngIf="dataTable.title.controls">
    <button type="button" class="btn btn-default btn-sm refresh-button" (click)="dataTable.reloadItems()">
      <i class="fa fa-refresh"></i>
    </button>
    <button type="button" class="btn btn-default btn-sm column-selector-button" [class.active]="columnSelectorOpen"
            (click)="columnSelectorOpen = !columnSelectorOpen; $event.stopPropagation()">
      <i class="fa fa-list"></i>
    </button>
    <div class="column-selector-wrapper" (click)="$event.stopPropagation()">
      <div *ngIf="columnSelectorOpen" class="column-selector-box card">
        <div *ngIf="dataTable.expandableRows" class="column-selector-fixed-column checkbox">
          <label>
            <input type="checkbox" [(ngModel)]="dataTable.expandColumnVisible"/>
            <span>{{dataTable.translations.expandColumn}}</span>
          </label>
        </div>
        <div *ngIf="dataTable.indexColumn" class="column-selector-fixed-column checkbox">
          <label>
            <input type="checkbox" [(ngModel)]="dataTable.indexColumnVisible"/>
            <span>{{dataTable.translations.indexColumn}}</span>
          </label>
        </div>
        <div *ngIf="dataTable.selectColumn" class="column-selector-fixed-column checkbox">
          <label>
            <input type="checkbox" [(ngModel)]="dataTable.selectColumnVisible"/>
            <span>{{dataTable.translations.selectColumn}}</span>
          </label>
        </div>
        <div *ngFor="let column of dataTable.columns" class="column-selector-column checkbox">
          <label>
            <input type="checkbox" [(ngModel)]="column.visible"/>
            <span [textContent]="column.header"></span>
          </label>
        </div>
      </div>
    </div>
  </div>
</div>
`,
                styles: [`.navbar{padding:10px 0}.navbar .title{margin:5px 0 0 5px}.column-selector-wrapper{position:relative}.column-selector-wrapper .column-selector-box{box-shadow:0 0 10px #d3d3d3;width:150px;padding:10px;position:absolute;right:0;top:1px;z-index:1060}.column-selector-wrapper .column-selector-box .checkbox{margin-bottom:4px}.column-selector-wrapper .column-selector-box .column-selector-fixed-column{font-style:italic}`]
            },] },
];
/** @nocollapse */
DataTableTitleComponent.ctorParameters = () => [
    { type: DataTable$$1, decorators: [{ type: Inject, args: [forwardRef(() => DataTable$$1),] }] }
];
DataTableTitleComponent.propDecorators = {
    _closeSelector: [{ type: HostListener, args: ['document:click', ['$event'],] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class DataTableTitle {
    constructor() {
        this.title = '';
        this.controls = true;
    }
}
DataTableTitle.decorators = [
    { type: Directive, args: [{
                selector: 'data-table-title'
            },] },
];
DataTableTitle.propDecorators = {
    title: [{ type: Input }],
    titleTemplate: [{ type: ContentChild, args: ['titleTemplate',] }],
    controls: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @param {?} obj
 * @return {?}
 */
function isBlank(obj) {
    return obj === undefined || obj === null;
}
class HideDirective {
    /**
     * @param {?} _elementRef
     * @param {?} _renderer
     */
    constructor(_elementRef, _renderer) {
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this._prevCondition = null;
    }
    /**
     * @param {?} newCondition
     * @return {?}
     */
    set hide(newCondition) {
        this.initDisplayStyle();
        if (newCondition && (isBlank(this._prevCondition) || !this._prevCondition)) {
            this._prevCondition = true;
            this._renderer.setElementStyle(this._elementRef.nativeElement, 'display', 'none');
        }
        else if (!newCondition && (isBlank(this._prevCondition) || this._prevCondition)) {
            this._prevCondition = false;
            this._renderer.setElementStyle(this._elementRef.nativeElement, 'display', this._displayStyle);
        }
    }
    /**
     * @return {?}
     */
    initDisplayStyle() {
        if (this._displayStyle === undefined) {
            let /** @type {?} */ displayStyle = this._elementRef.nativeElement.style.display;
            if (displayStyle && displayStyle !== 'none') {
                this._displayStyle = displayStyle;
            }
        }
    }
}
HideDirective.decorators = [
    { type: Directive, args: [{ selector: '[hide]' },] },
];
/** @nocollapse */
HideDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer }
];
HideDirective.propDecorators = {
    hide: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MinPipe {
    /**
     * @param {?} value
     * @param {...?} args
     * @return {?}
     */
    transform(value, ...args) {
        return Math.min.apply(null, value);
    }
}
MinPipe.decorators = [
    { type: Pipe, args: [{
                name: 'min'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class PxPipe {
    /**
     * @param {?} value
     * @param {...?} args
     * @return {?}
     */
    transform(value, ...args) {
        if (value) {
            return Number(value) >= 0 ? `${value}px` : value;
        }
    }
}
PxPipe.decorators = [
    { type: Pipe, args: [{
                name: 'px'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @template T
 */
class DataTableResource {
    /**
     * @param {?} items
     */
    constructor(items) {
        this.items = items;
    }
    /**
     * @param {?} params
     * @param {?=} filter
     * @return {?}
     */
    query(params, filter) {
        let /** @type {?} */ result = [];
        if (filter) {
            result = this.items.filter(filter);
        }
        else {
            result = this.items.slice(); // shallow copy to use for sorting instead of changing the original
        }
        if (params.sortBy) {
            result.sort((a, b) => {
                if (typeof a[params.sortBy] === 'string') {
                    return a[params.sortBy].localeCompare(b[params.sortBy]);
                }
                else {
                    return a[params.sortBy] - b[params.sortBy];
                }
            });
            if (params.sortAsc === false) {
                result.reverse();
            }
        }
        if (params.offset !== undefined) {
            if (params.limit === undefined) {
                result = result.slice(params.offset, result.length);
            }
            else {
                result = result.slice(params.offset, params.offset + params.limit);
            }
        }
        return new Promise((resolve, reject) => {
            setTimeout(() => resolve(result));
        });
    }
    /**
     * @return {?}
     */
    count() {
        return new Promise((resolve, reject) => {
            setTimeout(() => resolve(this.items.length));
        });
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class DataTableModule {
}
DataTableModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    FormsModule
                ],
                declarations: [
                    DataTable$$1,
                    DataTableColumn,
                    DataTableTitle,
                    DataTableRow$$1,
                    DataTablePagination$$1,
                    DataTableTitleComponent,
                    PxPipe,
                    HideDirective,
                    MinPipe
                ],
                exports: [DataTable$$1, DataTableColumn, DataTableTitle, DataTablePagination$$1]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { DataTable$$1 as DataTable, DataTableColumn, DataTableRow$$1 as DataTableRow, DataTableTitle, DataTablePagination$$1 as DataTablePagination, DataTableModule, defaultTranslations, DataTableResource, DataTableTitleComponent as ɵa, HideDirective as ɵc, MinPipe as ɵd, PxPipe as ɵb };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,