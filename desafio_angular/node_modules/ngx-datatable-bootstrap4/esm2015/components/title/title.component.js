/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, forwardRef, HostListener, Inject } from '@angular/core';
import { DataTable } from '../../';
/**
 * @template T
 */
export class DataTableTitleComponent {
    /**
     * @param {?} dataTable
     */
    constructor(dataTable) {
        this.dataTable = dataTable;
        this.columnSelectorOpen = false;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    _closeSelector($event) {
        this.columnSelectorOpen = false;
    }
}
DataTableTitleComponent.decorators = [
    { type: Component, args: [{
                selector: 'data-table-title',
                template: `<div class="navbar">
  <h4 class="title" [textContent]="dataTable.title.title"></h4>
  <ng-container *ngIf="dataTable.title.titleTemplate" [ngTemplateOutlet]="dataTable.title.titleTemplate"
                [ngTemplateOutletContext]="{items: dataTable.items}">
  </ng-container>
  <div *ngIf="dataTable.title.controls">
    <button type="button" class="btn btn-default btn-sm refresh-button" (click)="dataTable.reloadItems()">
      <i class="fa fa-refresh"></i>
    </button>
    <button type="button" class="btn btn-default btn-sm column-selector-button" [class.active]="columnSelectorOpen"
            (click)="columnSelectorOpen = !columnSelectorOpen; $event.stopPropagation()">
      <i class="fa fa-list"></i>
    </button>
    <div class="column-selector-wrapper" (click)="$event.stopPropagation()">
      <div *ngIf="columnSelectorOpen" class="column-selector-box card">
        <div *ngIf="dataTable.expandableRows" class="column-selector-fixed-column checkbox">
          <label>
            <input type="checkbox" [(ngModel)]="dataTable.expandColumnVisible"/>
            <span>{{dataTable.translations.expandColumn}}</span>
          </label>
        </div>
        <div *ngIf="dataTable.indexColumn" class="column-selector-fixed-column checkbox">
          <label>
            <input type="checkbox" [(ngModel)]="dataTable.indexColumnVisible"/>
            <span>{{dataTable.translations.indexColumn}}</span>
          </label>
        </div>
        <div *ngIf="dataTable.selectColumn" class="column-selector-fixed-column checkbox">
          <label>
            <input type="checkbox" [(ngModel)]="dataTable.selectColumnVisible"/>
            <span>{{dataTable.translations.selectColumn}}</span>
          </label>
        </div>
        <div *ngFor="let column of dataTable.columns" class="column-selector-column checkbox">
          <label>
            <input type="checkbox" [(ngModel)]="column.visible"/>
            <span [textContent]="column.header"></span>
          </label>
        </div>
      </div>
    </div>
  </div>
</div>
`,
                styles: [`.navbar{padding:10px 0}.navbar .title{margin:5px 0 0 5px}.column-selector-wrapper{position:relative}.column-selector-wrapper .column-selector-box{box-shadow:0 0 10px #d3d3d3;width:150px;padding:10px;position:absolute;right:0;top:1px;z-index:1060}.column-selector-wrapper .column-selector-box .checkbox{margin-bottom:4px}.column-selector-wrapper .column-selector-box .column-selector-fixed-column{font-style:italic}`]
            },] },
];
/** @nocollapse */
DataTableTitleComponent.ctorParameters = () => [
    { type: DataTable, decorators: [{ type: Inject, args: [forwardRef(() => DataTable),] }] }
];
DataTableTitleComponent.propDecorators = {
    _closeSelector: [{ type: HostListener, args: ['document:click', ['$event'],] }]
};
function DataTableTitleComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    DataTableTitleComponent.prototype.columnSelectorOpen;
    /** @type {?} */
    DataTableTitleComponent.prototype.dataTable;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGl0bGUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWRhdGF0YWJsZS1ib290c3RyYXA0LyIsInNvdXJjZXMiOlsiY29tcG9uZW50cy90aXRsZS90aXRsZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDMUUsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLFFBQVEsQ0FBQzs7OztBQWtEakMsTUFBTTs7OztJQUlKLFlBQXdELFNBQXVCO1FBQXZCLGNBQVMsR0FBVCxTQUFTLENBQWM7a0NBRjFELEtBQUs7S0FHekI7Ozs7O0lBR0QsY0FBYyxDQUFDLE1BQU07UUFDbkIsSUFBSSxDQUFDLGtCQUFrQixHQUFHLEtBQUssQ0FBQztLQUNqQzs7O1lBMURGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsa0JBQWtCO2dCQUM1QixRQUFRLEVBQUU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0EyQ1g7Z0JBQ0MsTUFBTSxFQUFFLENBQUMsZ2FBQWdhLENBQUM7YUFDM2E7Ozs7WUFqRE8sU0FBUyx1QkFzREYsTUFBTSxTQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxTQUFTLENBQUM7Ozs2QkFHOUMsWUFBWSxTQUFDLGdCQUFnQixFQUFFLENBQUMsUUFBUSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnQsIGZvcndhcmRSZWYsIEhvc3RMaXN0ZW5lciwgSW5qZWN0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7RGF0YVRhYmxlfSBmcm9tICcuLi8uLi8nO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkYXRhLXRhYmxlLXRpdGxlJyxcbiAgdGVtcGxhdGU6IGA8ZGl2IGNsYXNzPVwibmF2YmFyXCI+XG4gIDxoNCBjbGFzcz1cInRpdGxlXCIgW3RleHRDb250ZW50XT1cImRhdGFUYWJsZS50aXRsZS50aXRsZVwiPjwvaDQ+XG4gIDxuZy1jb250YWluZXIgKm5nSWY9XCJkYXRhVGFibGUudGl0bGUudGl0bGVUZW1wbGF0ZVwiIFtuZ1RlbXBsYXRlT3V0bGV0XT1cImRhdGFUYWJsZS50aXRsZS50aXRsZVRlbXBsYXRlXCJcbiAgICAgICAgICAgICAgICBbbmdUZW1wbGF0ZU91dGxldENvbnRleHRdPVwie2l0ZW1zOiBkYXRhVGFibGUuaXRlbXN9XCI+XG4gIDwvbmctY29udGFpbmVyPlxuICA8ZGl2ICpuZ0lmPVwiZGF0YVRhYmxlLnRpdGxlLmNvbnRyb2xzXCI+XG4gICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLWRlZmF1bHQgYnRuLXNtIHJlZnJlc2gtYnV0dG9uXCIgKGNsaWNrKT1cImRhdGFUYWJsZS5yZWxvYWRJdGVtcygpXCI+XG4gICAgICA8aSBjbGFzcz1cImZhIGZhLXJlZnJlc2hcIj48L2k+XG4gICAgPC9idXR0b24+XG4gICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLWRlZmF1bHQgYnRuLXNtIGNvbHVtbi1zZWxlY3Rvci1idXR0b25cIiBbY2xhc3MuYWN0aXZlXT1cImNvbHVtblNlbGVjdG9yT3BlblwiXG4gICAgICAgICAgICAoY2xpY2spPVwiY29sdW1uU2VsZWN0b3JPcGVuID0gIWNvbHVtblNlbGVjdG9yT3BlbjsgJGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpXCI+XG4gICAgICA8aSBjbGFzcz1cImZhIGZhLWxpc3RcIj48L2k+XG4gICAgPC9idXR0b24+XG4gICAgPGRpdiBjbGFzcz1cImNvbHVtbi1zZWxlY3Rvci13cmFwcGVyXCIgKGNsaWNrKT1cIiRldmVudC5zdG9wUHJvcGFnYXRpb24oKVwiPlxuICAgICAgPGRpdiAqbmdJZj1cImNvbHVtblNlbGVjdG9yT3BlblwiIGNsYXNzPVwiY29sdW1uLXNlbGVjdG9yLWJveCBjYXJkXCI+XG4gICAgICAgIDxkaXYgKm5nSWY9XCJkYXRhVGFibGUuZXhwYW5kYWJsZVJvd3NcIiBjbGFzcz1cImNvbHVtbi1zZWxlY3Rvci1maXhlZC1jb2x1bW4gY2hlY2tib3hcIj5cbiAgICAgICAgICA8bGFiZWw+XG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgWyhuZ01vZGVsKV09XCJkYXRhVGFibGUuZXhwYW5kQ29sdW1uVmlzaWJsZVwiLz5cbiAgICAgICAgICAgIDxzcGFuPnt7ZGF0YVRhYmxlLnRyYW5zbGF0aW9ucy5leHBhbmRDb2x1bW59fTwvc3Bhbj5cbiAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiAqbmdJZj1cImRhdGFUYWJsZS5pbmRleENvbHVtblwiIGNsYXNzPVwiY29sdW1uLXNlbGVjdG9yLWZpeGVkLWNvbHVtbiBjaGVja2JveFwiPlxuICAgICAgICAgIDxsYWJlbD5cbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBbKG5nTW9kZWwpXT1cImRhdGFUYWJsZS5pbmRleENvbHVtblZpc2libGVcIi8+XG4gICAgICAgICAgICA8c3Bhbj57e2RhdGFUYWJsZS50cmFuc2xhdGlvbnMuaW5kZXhDb2x1bW59fTwvc3Bhbj5cbiAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiAqbmdJZj1cImRhdGFUYWJsZS5zZWxlY3RDb2x1bW5cIiBjbGFzcz1cImNvbHVtbi1zZWxlY3Rvci1maXhlZC1jb2x1bW4gY2hlY2tib3hcIj5cbiAgICAgICAgICA8bGFiZWw+XG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgWyhuZ01vZGVsKV09XCJkYXRhVGFibGUuc2VsZWN0Q29sdW1uVmlzaWJsZVwiLz5cbiAgICAgICAgICAgIDxzcGFuPnt7ZGF0YVRhYmxlLnRyYW5zbGF0aW9ucy5zZWxlY3RDb2x1bW59fTwvc3Bhbj5cbiAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiAqbmdGb3I9XCJsZXQgY29sdW1uIG9mIGRhdGFUYWJsZS5jb2x1bW5zXCIgY2xhc3M9XCJjb2x1bW4tc2VsZWN0b3ItY29sdW1uIGNoZWNrYm94XCI+XG4gICAgICAgICAgPGxhYmVsPlxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIFsobmdNb2RlbCldPVwiY29sdW1uLnZpc2libGVcIi8+XG4gICAgICAgICAgICA8c3BhbiBbdGV4dENvbnRlbnRdPVwiY29sdW1uLmhlYWRlclwiPjwvc3Bhbj5cbiAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvZGl2PlxuYCxcbiAgc3R5bGVzOiBbYC5uYXZiYXJ7cGFkZGluZzoxMHB4IDB9Lm5hdmJhciAudGl0bGV7bWFyZ2luOjVweCAwIDAgNXB4fS5jb2x1bW4tc2VsZWN0b3Itd3JhcHBlcntwb3NpdGlvbjpyZWxhdGl2ZX0uY29sdW1uLXNlbGVjdG9yLXdyYXBwZXIgLmNvbHVtbi1zZWxlY3Rvci1ib3h7Ym94LXNoYWRvdzowIDAgMTBweCAjZDNkM2QzO3dpZHRoOjE1MHB4O3BhZGRpbmc6MTBweDtwb3NpdGlvbjphYnNvbHV0ZTtyaWdodDowO3RvcDoxcHg7ei1pbmRleDoxMDYwfS5jb2x1bW4tc2VsZWN0b3Itd3JhcHBlciAuY29sdW1uLXNlbGVjdG9yLWJveCAuY2hlY2tib3h7bWFyZ2luLWJvdHRvbTo0cHh9LmNvbHVtbi1zZWxlY3Rvci13cmFwcGVyIC5jb2x1bW4tc2VsZWN0b3ItYm94IC5jb2x1bW4tc2VsZWN0b3ItZml4ZWQtY29sdW1ue2ZvbnQtc3R5bGU6aXRhbGljfWBdXG59KVxuZXhwb3J0IGNsYXNzIERhdGFUYWJsZVRpdGxlQ29tcG9uZW50PFQ+IHtcblxuICBjb2x1bW5TZWxlY3Rvck9wZW4gPSBmYWxzZTtcblxuICBjb25zdHJ1Y3RvcihASW5qZWN0KGZvcndhcmRSZWYoKCkgPT4gRGF0YVRhYmxlKSkgcHVibGljIGRhdGFUYWJsZTogRGF0YVRhYmxlPFQ+KSB7XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdkb2N1bWVudDpjbGljaycsIFsnJGV2ZW50J10pXG4gIF9jbG9zZVNlbGVjdG9yKCRldmVudCkge1xuICAgIHRoaXMuY29sdW1uU2VsZWN0b3JPcGVuID0gZmFsc2U7XG4gIH1cbn1cblxuIl19