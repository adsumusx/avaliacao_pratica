/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, ContentChild, ContentChildren, EventEmitter, forwardRef, Input, Output, QueryList, TemplateRef, ViewChildren } from '@angular/core';
import { DataTableColumn, DataTableRow, DataTableTitle } from '../../';
import { drag } from '../../utils/drag';
import { defaultTranslations } from '../types';
/**
 * @template T
 */
export class DataTable {
    constructor() {
        this._sortAsc = true;
        this._offset = 0;
        this._limit = 10;
        this._items = [];
        this._scheduledReload = null;
        this._selectAllCheckbox = false;
        this._displayParams = /** @type {?} */ ({});
        this._reloading = false;
        this._resizeInProgress = false;
        this.selectedRows = [];
        this.resizeLimit = 30;
        this.pagination = true;
        this.indexColumn = true;
        this.indexColumnHeader = '';
        this.selectColumn = false;
        this.multiSelect = true;
        this.substituteRows = true;
        this.expandableRows = false;
        this.translations = defaultTranslations;
        this.selectOnRowClick = false;
        this.autoReload = true;
        this.showReloading = false;
        // event handlers:
        this.rowClick = new EventEmitter();
        this.rowExpand = new EventEmitter();
        this.rowDoubleClick = new EventEmitter();
        this.headerClick = new EventEmitter();
        this.cellClick = new EventEmitter();
        this.reload = new EventEmitter();
    }
    /**
     * @return {?}
     */
    get items() {
        return this._items;
    }
    /**
     * @param {?} items
     * @return {?}
     */
    set items(items) {
        this._items = items;
        this._onReloadFinished();
    }
    /**
     * @return {?}
     */
    get sortBy() {
        return this._sortBy;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set sortBy(value) {
        this._sortBy = value;
        this._triggerReload();
    }
    /**
     * @return {?}
     */
    get sortAsc() {
        return this._sortAsc;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set sortAsc(value) {
        this._sortAsc = value;
        this._triggerReload();
    }
    /**
     * @return {?}
     */
    get offset() {
        return this._offset;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set offset(value) {
        this._offset = value;
        this._triggerReload();
    }
    /**
     * @return {?}
     */
    get limit() {
        return this._limit;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set limit(value) {
        this._limit = value;
        this._triggerReload();
    }
    /**
     * @return {?}
     */
    get page() {
        return Math.floor(this.offset / this.limit) + 1;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set page(value) {
        this.offset = (value - 1) * this.limit;
    }
    /**
     * @return {?}
     */
    get lastPage() {
        return Math.ceil(this.itemCount / this.limit);
    }
    /**
     * @return {?}
     */
    get reloading() {
        return this._reloading;
    }
    /**
     * @return {?}
     */
    get displayParams() {
        return this._displayParams;
    }
    /**
     * @return {?}
     */
    get selectAllCheckbox() {
        return this._selectAllCheckbox;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set selectAllCheckbox(value) {
        this._selectAllCheckbox = value;
        this._onSelectAllChanged(value);
    }
    /**
     * @return {?}
     */
    get columnCount() {
        let /** @type {?} */ count = 0;
        count += this.indexColumnVisible ? 1 : 0;
        count += this.selectColumnVisible ? 1 : 0;
        count += this.expandColumnVisible ? 1 : 0;
        this.columns.toArray().forEach(column => {
            count += column.visible ? 1 : 0;
        });
        return count;
    }
    /**
     * @return {?}
     */
    get substituteItems() {
        return Array.from({ length: /** @type {?} */ ((this.displayParams)).limit - this.items.length });
    }
    /**
     * @param {?} item
     * @param {?} index
     * @param {?} row
     * @return {?}
     */
    getRowColor(item, index, row) {
        if (this.rowColors !== undefined) {
            return (/** @type {?} */ (this.rowColors))(item, row, index);
        }
    }
    /**
     * @param {?} sortBy
     * @param {?} asc
     * @return {?}
     */
    sort(sortBy, asc) {
        this.sortBy = sortBy;
        this.sortAsc = asc;
    }
    /**
     * @return {?}
     */
    reloadItems() {
        this._reloading = true;
        this.reload.emit(this._getRemoteParameters());
    }
    /**
     * @param {?} row
     * @param {?} event
     * @return {?}
     */
    rowClicked(row, event) {
        this.rowClick.emit({ row, event });
    }
    /**
     * @param {?} row
     * @param {?} event
     * @return {?}
     */
    rowDoubleClicked(row, event) {
        this.rowDoubleClick.emit({ row, event });
    }
    /**
     * @param {?} column
     * @param {?} event
     * @return {?}
     */
    headerClicked(column, event) {
        if (!this._resizeInProgress) {
            this.headerClick.emit({ column, event });
        }
        else {
            // this is because I can't prevent click from mousup of the drag end
            this._resizeInProgress = false;
        }
    }
    /**
     * @param {?} column
     * @param {?} row
     * @param {?} event
     * @return {?}
     */
    cellClicked(column, row, event) {
        this.cellClick.emit({ row, column, event });
    }
    /**
     * @param {?} row
     * @param {?} event
     * @return {?}
     */
    rowExpanded(row, event) {
        this.rowExpand.emit({ row, event });
    }
    /**
     * @param {?} row
     * @return {?}
     */
    onRowSelectChanged(row) {
        // maintain the selectedRow(s) view
        if (this.multiSelect) {
            let /** @type {?} */ index = this.selectedRows.indexOf(row);
            if (row.selected && index < 0) {
                this.selectedRows.push(row);
            }
            else if (!row.selected && index >= 0) {
                this.selectedRows.splice(index, 1);
            }
        }
        else {
            if (row.selected) {
                this.selectedRow = row;
            }
            else if (this.selectedRow === row) {
                this.selectedRow = undefined;
            }
        }
        // unselect all other rows:
        if (row.selected && !this.multiSelect) {
            this.rows.toArray().filter(row_ => row_.selected).forEach(row_ => {
                if (row_ !== row) {
                    // avoid endless loop
                    row_.selected = false;
                }
            });
        }
    }
    /**
     * @param {?} event
     * @param {?} column
     * @param {?} columnElement
     * @return {?}
     */
    resizeColumnStart(event, column, columnElement) {
        this._resizeInProgress = true;
        drag(event, {
            move: (moveEvent, dx) => {
                if (this._isResizeInLimit(columnElement, dx)) {
                    column.width = columnElement.offsetWidth + dx;
                }
            },
        });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this._initDefaultValues();
        this._initDefaultClickEvents();
        this._updateDisplayParams();
        if (this.autoReload && this._scheduledReload == null) {
            this.reloadItems();
        }
    }
    /**
     * @return {?}
     */
    _initDefaultValues() {
        this.indexColumnVisible = this.indexColumn;
        this.selectColumnVisible = this.selectColumn;
        this.expandColumnVisible = this.expandableRows;
    }
    /**
     * @return {?}
     */
    _initDefaultClickEvents() {
        this.headerClick.subscribe(tableEvent => this._sortColumn(tableEvent.column));
        if (this.selectOnRowClick) {
            this.rowClick.subscribe(tableEvent => tableEvent.row.selected = !tableEvent.row.selected);
        }
    }
    /**
     * @return {?}
     */
    _onReloadFinished() {
        this._updateDisplayParams();
        this._selectAllCheckbox = false;
        this._reloading = false;
    }
    /**
     * @return {?}
     */
    _updateDisplayParams() {
        this._displayParams = {
            sortBy: this.sortBy,
            sortAsc: this.sortAsc,
            offset: this.offset,
            limit: this.limit
        };
    }
    /**
     * @return {?}
     */
    _triggerReload() {
        // for avoiding cascading reloads if multiple params are set at once:
        if (this._scheduledReload) {
            clearTimeout(this._scheduledReload);
        }
        this._scheduledReload = setTimeout(() => {
            this.reloadItems();
        });
    }
    /**
     * @return {?}
     */
    _getRemoteParameters() {
        let /** @type {?} */ params = /** @type {?} */ ({});
        if (this.sortBy) {
            params.sortBy = this.sortBy;
            params.sortAsc = this.sortAsc;
        }
        if (this.pagination) {
            params.offset = this.offset;
            params.limit = this.limit;
        }
        return params;
    }
    /**
     * @param {?} column
     * @return {?}
     */
    _sortColumn(column) {
        if (column.sortable) {
            let /** @type {?} */ ascending = this.sortBy === column.property ? !this.sortAsc : true;
            this.sort(column.property, ascending);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    _onSelectAllChanged(value) {
        this.rows.toArray().forEach(row => row.selected = value);
    }
    /**
     * @param {?} columnElement
     * @param {?} dx
     * @return {?}
     */
    _isResizeInLimit(columnElement, dx) {
        /* This is needed because CSS min-width didn't work on table-layout: fixed.
             Without the limits, resizing can make the next column disappear completely,
             and even increase the table width. The current implementation suffers from the fact,
             that offsetWidth sometimes contains out-of-date values. */
        return !((dx < 0 && (columnElement.offsetWidth + dx) <= this.resizeLimit) ||
            !columnElement.nextElementSibling || // resizing doesn't make sense for the last visible column
            // resizing doesn't make sense for the last visible column
            (dx >= 0 && ((/** @type {?} */ (columnElement.nextElementSibling)).offsetWidth + dx) <= this.resizeLimit));
    }
}
DataTable.decorators = [
    { type: Component, args: [{
                selector: 'data-table',
                template: `<div class="data-table-wrapper">
  <data-table-title *ngIf="title"></data-table-title>

  <div class="data-table-box">
    <table class="table table-condensed data-table">
      <thead>
      <tr>
        <th [hide]="!expandColumnVisible" class="expand-column-header">
        <th [hide]="!indexColumnVisible" class="index-column-header">
          <span [textContent]="indexColumnHeader"></span>
        </th>
        <th [hide]="!selectColumnVisible" class="select-column-header">
          <input [hide]="!multiSelect" type="checkbox" [(ngModel)]="selectAllCheckbox"/>
        </th>
        <th *ngFor="let column of columns" #th [hide]="!column.visible" (click)="headerClicked(column, $event)"
            [class.sortable]="column.sortable" [class.resizable]="column.resizable"
            [ngClass]="column.styleClassObject" class="column-header" [style.width]="column.width | px">
          <span *ngIf="!column.headerTemplate" [textContent]="column.header"></span>
          <ng-container *ngIf="column.headerTemplate" [ngTemplateOutlet]="column.headerTemplate"
                [ngTemplateOutletContext]="{column: column}"></ng-container>
          <span class="column-sort-icon" *ngIf="column.sortable">
            <i class="fa fa-sort column-sortable-icon" [hide]="column.property === sortBy"></i>
            <span [hide]="column.property !== sortBy">
              <i class="fa fa-sort-asc" [hide]="sortAsc"></i>
              <i class="fa fa-sort-desc" [hide]="!sortAsc"></i>
            </span>
          </span>
          <span *ngIf="column.resizable" class="column-resize-handle"
                (mousedown)="resizeColumnStart($event, column, th)"></span>
        </th>
      </tr>
      </thead>
      <tbody *ngFor="let item of items; let index=index" class="data-table-row-wrapper"
             dataTableRow #row [item]="item" [index]="index" (selectedChange)="onRowSelectChanged(row)">
      </tbody>
      <tbody class="substitute-rows" *ngIf="pagination && substituteRows">
      <tr *ngFor="let item of substituteItems, let index = index"
          [class.row-odd]="(index + items.length) % 2 === 0"
          [class.row-even]="(index + items.length) % 2 === 1">
        <td [hide]="!expandColumnVisible"></td>
        <td [hide]="!indexColumnVisible">&nbsp;</td>
        <td [hide]="!selectColumnVisible"></td>
        <td *ngFor="let column of columns" [hide]="!column.visible">
      </tr>
      </tbody>
    </table>
    <div class="loading-cover" *ngIf="showReloading && reloading"></div>
  </div>

  <data-table-pagination *ngIf="pagination"></data-table-pagination>
</div>
`,
                styles: [`:host /deep/ .data-table.table>tbody+tbody{border-top:none}:host /deep/ .data-table.table td{vertical-align:middle}:host /deep/ .data-table>tbody>tr>td,:host /deep/ .data-table>thead>tr>th{overflow:hidden}:host /deep/ .row-odd{background-color:#f6f6f6}.data-table .substitute-rows>tr:hover,:host /deep/ .data-table .data-table-row:hover{background-color:#ececec}.data-table{box-shadow:0 0 15px #ececec;table-layout:fixed}.column-header{position:relative}.expand-column-header{width:50px}.select-column-header{width:50px;text-align:center}.index-column-header{width:40px}.column-header.sortable{cursor:pointer}.column-header .column-sort-icon{float:right}.column-header.resizable .column-sort-icon{margin-right:8px}.column-header .column-sort-icon .column-sortable-icon{color:#d3d3d3}.column-header .column-resize-handle{position:absolute;top:0;right:0;margin:0;padding:0;width:8px;height:100%;cursor:col-resize}.data-table-box{position:relative}.loading-cover{position:absolute;width:100%;height:100%;background-color:rgba(255,255,255,.3);top:0}`]
            },] },
];
DataTable.propDecorators = {
    itemCount: [{ type: Input }],
    pagination: [{ type: Input }],
    indexColumn: [{ type: Input }],
    indexColumnHeader: [{ type: Input }],
    rowColors: [{ type: Input }],
    rowTooltip: [{ type: Input }],
    selectColumn: [{ type: Input }],
    multiSelect: [{ type: Input }],
    substituteRows: [{ type: Input }],
    expandableRows: [{ type: Input }],
    translations: [{ type: Input }],
    selectOnRowClick: [{ type: Input }],
    autoReload: [{ type: Input }],
    showReloading: [{ type: Input }],
    rowClick: [{ type: Output }],
    rowExpand: [{ type: Output }],
    rowDoubleClick: [{ type: Output }],
    headerClick: [{ type: Output }],
    cellClick: [{ type: Output }],
    reload: [{ type: Output }],
    title: [{ type: ContentChild, args: [forwardRef(() => DataTableTitle),] }],
    columns: [{ type: ContentChildren, args: [DataTableColumn,] }],
    rows: [{ type: ViewChildren, args: [DataTableRow,] }],
    expandTemplate: [{ type: ContentChild, args: ['expandTemplate',] }],
    items: [{ type: Input }],
    sortBy: [{ type: Input }],
    sortAsc: [{ type: Input }],
    offset: [{ type: Input }],
    limit: [{ type: Input }],
    page: [{ type: Input }]
};
function DataTable_tsickle_Closure_declarations() {
    /** @type {?} */
    DataTable.prototype.indexColumnVisible;
    /** @type {?} */
    DataTable.prototype.selectColumnVisible;
    /** @type {?} */
    DataTable.prototype.expandColumnVisible;
    /** @type {?} */
    DataTable.prototype._sortBy;
    /** @type {?} */
    DataTable.prototype._sortAsc;
    /** @type {?} */
    DataTable.prototype._offset;
    /** @type {?} */
    DataTable.prototype._limit;
    /** @type {?} */
    DataTable.prototype._items;
    /** @type {?} */
    DataTable.prototype._scheduledReload;
    /** @type {?} */
    DataTable.prototype._selectAllCheckbox;
    /** @type {?} */
    DataTable.prototype._displayParams;
    /** @type {?} */
    DataTable.prototype._reloading;
    /** @type {?} */
    DataTable.prototype._resizeInProgress;
    /** @type {?} */
    DataTable.prototype.selectedRow;
    /** @type {?} */
    DataTable.prototype.selectedRows;
    /** @type {?} */
    DataTable.prototype.resizeLimit;
    /** @type {?} */
    DataTable.prototype.itemCount;
    /** @type {?} */
    DataTable.prototype.pagination;
    /** @type {?} */
    DataTable.prototype.indexColumn;
    /** @type {?} */
    DataTable.prototype.indexColumnHeader;
    /** @type {?} */
    DataTable.prototype.rowColors;
    /** @type {?} */
    DataTable.prototype.rowTooltip;
    /** @type {?} */
    DataTable.prototype.selectColumn;
    /** @type {?} */
    DataTable.prototype.multiSelect;
    /** @type {?} */
    DataTable.prototype.substituteRows;
    /** @type {?} */
    DataTable.prototype.expandableRows;
    /** @type {?} */
    DataTable.prototype.translations;
    /** @type {?} */
    DataTable.prototype.selectOnRowClick;
    /** @type {?} */
    DataTable.prototype.autoReload;
    /** @type {?} */
    DataTable.prototype.showReloading;
    /** @type {?} */
    DataTable.prototype.rowClick;
    /** @type {?} */
    DataTable.prototype.rowExpand;
    /** @type {?} */
    DataTable.prototype.rowDoubleClick;
    /** @type {?} */
    DataTable.prototype.headerClick;
    /** @type {?} */
    DataTable.prototype.cellClick;
    /** @type {?} */
    DataTable.prototype.reload;
    /** @type {?} */
    DataTable.prototype.title;
    /** @type {?} */
    DataTable.prototype.columns;
    /** @type {?} */
    DataTable.prototype.rows;
    /** @type {?} */
    DataTable.prototype.expandTemplate;
}

//# sourceMappingURL=data:application/json;base64,